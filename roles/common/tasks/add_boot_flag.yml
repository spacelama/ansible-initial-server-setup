---
# We munge individual files in /etc/default/grub.d/, although that
# doesn't appear well documented anyway (other than at
# https://pve.proxmox.com/wiki/Host_Bootloader ) and might not be
# guaranteed; the man page doesn't guarantee anything more than shell
# syntax key=value pairs.  But the source for grub-mkconfig shows it
# currently sourcing *.cfg

- name: calculate flags
  include_tasks: calculate_flag_variables.yml

- name: "Create flag {{ grub_setflag }} to grub config: /etc/default/grub.d/ansible.{{ grub_key }}{{ grub_file_ext }}.cfg"
  copy:
    dest: "/etc/default/grub.d/ansible.{{ grub_key }}{{ grub_file_ext }}.cfg"
    content: "{{ grub_comment_line }}{{ grub_variable }}=\"${{ grub_variable }} {{ grub_setflag }}\"\n"
  become: true
  notify: "Regenerate boot config"

  # now do the systemd-boot stuff:

- name: determine if /etc/kernel/cmdline exists
  stat: path=/etc/kernel/cmdline
  register: systemdboot_cmdline

- name: "Substitute flag {{ grub_setflag }} systemdboot config if already exists but needs updating"
  when: (systemdboot_cmdline.stat.exists) and not (recovery_systemdboot | default(false))
  lineinfile:
    dest: /etc/kernel/cmdline
    backrefs: yes
    regexp: "(.*){{ grub_setflag_re }}(.*)"
    line: "\\1{{ grub_setflag }}\\3"  #\2 is the bracket embedded within grub_setflag_re
    state: present
  become: true
  notify: "Regenerate boot config"

- name: "Search for {{ grub_setflag }} in systemdboot config"
  when: (systemdboot_cmdline.stat.exists) and not (recovery_systemdboot | default(false))
  register: systemdboot_variable_line_exists
  check_mode: yes # cause this to become just a test.  If there's already
                  # relevant settings, then this will think line is
                  # being replaced, and changed will become true (but we
                  # force it to false to not output a line saying
                  # "changed"), and msg will become "line added", else
                  # changed stays false, and msg does not contain "line
                  # added"
                  #
                  # We need to use this strange form because backrefs
                  # is used by next test, and modifies lineinfile to
                  # not try to add the line.  It's a pity ansible
                  # can't use backrefs that still work when there's no
                  # match in the first place.  Other people have
                  # solved it a different way:
                  # https://stackoverflow.com/questions/58173877/ansible-lineinfile-module-using-regexp-and-backrefs
  lineinfile:
    dest: /etc/kernel/cmdline
    line: systemdboot cmdline already has flag
    regexp: "{{ grub_setflag }}"
    state: present
  become: true
  changed_when: false

- name: "Append flag {{ grub_setflag }} systemdboot config"
  when: (systemdboot_cmdline.stat.exists) and not (recovery_systemdboot | default(false)) and (systemdboot_variable_line_exists.msg == "line added")
  lineinfile:
    dest: /etc/kernel/cmdline
    backrefs: yes
    regexp: "(.*)"
    line: "\\1 {{ grub_setflag }}"
    state: present
  become: true
  notify: "Regenerate boot config"

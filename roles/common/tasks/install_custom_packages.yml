---
#   # first check whether its installed at all
# - name: Check if qiv is installed
#   command: dpkg-query -W qiv
#   register: archived_package_check_deb
#   failed_when: archived_package_check_deb.rc > 1
#   changed_when: archived_package_check_deb.rc == 1

#   # first check whether the correct custom version is installed
# - name: Check if qiv is installed
#   shell: "dpkg-query -W qiv | grep 2.3.2-2"
#   register: correct_archived_package_check_deb
#   failed_when: correct_archived_package_check_deb.rc > 1
#   changed_when: correct_archived_package_check_deb.rc == 1

- name: Ensure frozen packages held at right version
  template:
    dest: "/etc/apt/preferences.d/ansible-hold-packages{{ apt_preferences_hold_suffix | default('') }}"
    src: etc/apt/preferences.d/ansible-hold-packages.j2
  become: true

- name: Ensures /dev/shm/ansible/Downloads dir exists  # large amount of temporary ramfs space
  file:
    path="/dev/shm/{{ ansible_env.USER }}/Downloads"
    state=directory
  changed_when: false
  check_mode: false

- name: Download archived .deb files
  copy:
    src: "deb/{{ item.file | default(item) }}"
    dest: "/dev/shm/{{ ansible_env.USER }}/Downloads/{{ item.file | default(item) }}"
#  when: correct_archived_package_check_deb.rc == 1
  loop: "{{ install_packages }}"
  changed_when: false
  check_mode: false

# - name: remove wrong version of downloaded .deb files
#   apt:
#     name: "{{ item }}"
#     state: absent
#   become: true
# #  when: (correct_archived_package_check_deb.rc == 1) and (archived_package_check_deb.rc == 0)
#   loop:
#     - qiv

- name: Unhold previously held package
  dpkg_selections:
    name: "{{ item.package }}"
    selection: install # unhold
  when: item.package is defined
  loop: "{{ install_packages }}"
  become: true

- name: set comma_separated_deb_installs
  set_fact:
    comma_separated_deb_installs: >-
      {% set file_paths = [] -%}
      {% for item in install_packages -%}
        {% set _ = file_paths.append("/dev/shm/" ~ ansible_env.USER ~ "/Downloads/" ~ ( item.file | default(item) ) ) -%}
      {% endfor -%}
      {{ file_paths | join(',') }}

- name: debug comma_separated_deb_installs
  debug:
    msg: "{{ comma_separated_deb_installs }}"

- name: Install archived_package
  apt:
    # https://github.com/ansible/ansible/issues/77144 - separate
    # multiple files with a comma!
    # deb: "{{ comma_separated_deb_installs }}"
    # Nope, that doesn't work either.  If this play breaks on things
    # like ansible-mitogen, you just have to remove the existing
    # packages and reinstall...
    deb: "/dev/shm/{{ ansible_env.USER }}/Downloads/{{ item.file | default(item) }}"
    allow_downgrade: true
  become: true
#  when: correct_archived_package_check_deb.rc == 1
  loop: "{{ install_packages }}"

---
- name: Install ansible bootstrap packages (all)
  apt:
    name: ['sudo']
    update_cache: no # can't - proxmox enterprise might be a repo, and isn't valid yet
    cache_valid_time: 3600
    autoremove: no
    state: present
  become: true

- name: Install ansible bootstrap packages (not containers)
  apt:
    name: ['ntp', 'aptitude']
    update_cache: no # can't - proxmox enterprise might be a repo, and isn't valid yet
    cache_valid_time: 3600
    autoremove: no
    state: present
  become: true
  when: host_is_container is not defined

  #FIXME: might need to go chrony instead of NTP if thats how we get VMs working

#- name: Enable unattended upgrades
#  copy:
#    src: apt/10periodic
#    dest: /etc/apt/apt.conf.d/10periodic
#    owner: root
#    group: root
#    mode: 0644

#- name: Ensure sudo group is present
#  group:
#    name: sudo
#    state: present

#- name: Ensure sudo group has sudo privileges
#  lineinfile:
#    dest: /etc/sudoers
#    state: present
#    regexp: "^%sudo"
#    line: "%sudo ALL=(ALL:ALL) ALL"
#    validate: "/usr/sbin/visudo -cf %s"

- name: set up ansible_adm sudoers
  copy:
    src: user/sudoers.d.ansible_adm
    dest: /etc/sudoers.d/ansible_adm
    owner: root
    group: root
    mode: 0440
  become: true

- name: Add new ansible_adm group
  group:
    name: "ansible_adm"
    gid: 9999
    state: present
  become: true

- name: Add new ansible_adm user
  user:
    name: "ansible_adm"
    password: "!"
    uid: 9999
    group: ansible_adm
    append: no
    state: present
    shell: /bin/bash
  become: true

- name: Remove old ansible sudoers
  file:
    path: /etc/sudoers.d/ansible
    state: absent
  become: true

- name: Remove old ansible_adm user
  user:
    name: "ansible"
    state: absent
  become: true

- name: Remove old ansible group
  group:
    name: "ansible"
    state: absent
  become: true

- name: remove sshknownhosts munging
  lineinfile:
    path: "/etc/ssh/ssh_config"
    backup: yes
    backrefs: yes
    regexp: '^( *HashKnownHosts yes)'
    line: '#\1\nHashKnownHosts no'
    state: present
  become: true

- name: Get the local passwd database
  getent:
    database: passwd

  # could also have multiple keys with exclusive: https://stackoverflow.com/questions/38879266/is-it-possible-to-use-ansible-authorized-key-exclusive-with-multiple-keys
- name: Add SSH key for new ansible_adm user
  authorized_key:
    user: "ansible_adm"
    manage_dir: yes
    key: "{{ lookup('file', item) }}"
    #    comment: "{{ ansible_was_run_by }}"
    # if user doesn't have a home directory, just dump the key into /tmp and otherwise let the system ignore it
    path: "{{ getent_passwd['ansible_adm'][4] is defined | ternary(omit, '/tmp/ansible_adm_ssh_authorized_keys') }}"
    exclusive: yes
  become: true
  with_items: "{{ my_public_key }}"

---
- name: determine if enterprise pve subscription exists
  stat: path=/etc/apt/apt.conf.d/86pve-nags
  register: pve_enterprise_nag_buster

- name: ensure old pve community repository removed
  apt_repository:
    repo: deb http://download.proxmox.com/debian/pve buster pve-no-subscription
    state: absent
    filename: pve-community
  become: true

- name: copy pve-nag-buster/install.sh to pve
  copy:
    src: /home/tconnors/sysadmin/install/pve-nag-buster/install.sh
    dest: "/home/{{ ansible_env.USER }}/Downloads/pve-nag-buster-install.sh"
    mode: 0755

- name: install the pve nag buster
  command: /home/{{ ansible_env.USER }}/Downloads/pve-nag-buster-install.sh --offline
  when: not pve_enterprise_nag_buster.stat.exists
  become: true

- name: remove prohibited packages
  apt:
    name: ['os-prober']
    state: absent
  become: true

- name: Install proxmox tools
  apt:
    # https://pve.proxmox.com/wiki/Install_Proxmox_VE_on_Debian_Jessie
    name: ['proxmox-ve', 'ssh', 'postfix', 'ksm-control-daemon', 'open-iscsi', 'systemd-sysv', 'virt-goodies', 'munin-libvirt-plugins']
#, 'swapspace']
    update_cache: yes
    cache_valid_time: 3600
    autoremove: no
    state: present
  become: true

- name: ensure SMR drives have a longer timeout
  copy:
     content: "ACTION==\"add\", SUBSYSTEM==\"block\",  ENV{ID_MODEL}==\"ST8000AS0002*\", RUN+=\"/bin/sh -c 'echo 60 > /sys/block/%k/device/timeout'\"\n"
     # find string with `udevadm test /sys/class/block/sdf`
     # also tells you whether it appended RUN appropriately
     dest: /etc/udev/rules.d/90-SMR-drive-timeout.rules
  become: true

- name: install suspend-all
  copy:
    src: ./src/pve_server/{{ item }}
    dest: /usr/local/bin/{{ item }}
    owner: root
    group: root
    mode: 0755
  become: true
  with_items:
    - suspend-all

  # FIXME: there are no partitions on pve where there's enough space for swapspace to operate
#- name: Ensures /var/lib/swapspace 0700
#  file:
#    path="/var/lib/swapspace"
#    state=directory
#    mode=0700
#  become: true

- name: ensure all munin smart links are in place
  file:
    src: /usr/share/munin/plugins/smart_
    dest: "/etc/munin/plugins/smart_sd{{ item }}"
    state: link
  become: true
  with_items: { a, b, c, d, e, f, g, h, i, j, k, l, m, n }

- name: disable pve-ha-lrm/pve-ha-crm on a non HA setup, to alleviate constant disk writes by pmxcfs to SSD
  # https://forum.proxmox.com/threads/pmxcfs-writing-to-disk-all-the-time.35828/ https://www.reddit.com/r/Proxmox/comments/i8e5fi/excessive_nvme_wear_out/g193xr2/
  service:
    name: "{{ item }}"
    enabled: no
    state: stopped
  become: true
  with_items:
    - pve-ha-lrm
    - pve-ha-crm

- name: reduce frequent writes by pvesr.timer
  # https://forum.proxmox.com/threads/replication-runner-syslog.35600/
  copy:
    content: "[Unit]\nDescription=Proxmox VE replication runner\n\n[Timer]\nAccuracySec=1\nRemainAfterElapse=no\n\n[Timer]\nOnCalendar=hourly\n\n[Install]\nWantedBy=timers.target\n"
    dest: /etc/systemd/system/pvesr.timer
  become: true

  # FIXME: consider also reducing rrd writes: https://forum.proxmox.com/threads/reducing-rrdcached-writes.64473/
# (but primarily, suspect most writes are coming from rrd in fs)

# https://pve.proxmox.com/wiki/Pci_passthrough
- name: "Search for iommu grub config"
  become: yes
  register: iommu_grub_cmdline_exists
  check_mode: yes # cause this to become just a test.  If there's already
                  # iommu settings, then this will think line is
                  # being replaced, and changed will become true (but we
                  # force it to false to not output a line saying
                  # "changed"), and msg will become "line added", else
                  # changed stays false, and msg does not contain "line
                  # added"
  lineinfile:
    dest: /etc/default/grub
    line: grub cmdline already has iommu mitigations disabled
    regexp: "^GRUB_CMDLINE_LINUX_DEFAULT=.*intel_iommu=on"
    state: present
  changed_when: false

- name: "Append intel_iommu=on grub config"
  when: iommu_grub_cmdline_exists.msg == "line added"
  lineinfile:
    dest: /etc/default/grub
    backrefs: yes
    regexp: "^GRUB_CMDLINE_LINUX_DEFAULT=\"(.*)\""
    line: "GRUB_CMDLINE_LINUX_DEFAULT=\"\\1 intel_iommu=on iommu=pt\""
    state: present
  become: true
  notify: "Regenerate grub config"

- name: "host modules blacklist"
  copy:
    dest: /etc/modprobe.d/pve-custom-blacklist.conf
    content: "blacklist radeon\n"
  become: true
  notify: "Update initramfs config"

---
- name: determine if any hardware monitors exist
  stat: path=/sys/class/hwmon/hwmon0
  register: hwmon0

- name: find possibly extraneous munin checks (hwmon wildcard)
  find:
    paths: /etc/munin/plugins
    patterns:
      - sensors_*
    file_type: link
  register: munin_plugins_to_possibly_delete_hwmon

- name: find extraneous munin checks (wildcard)
  find:
    paths: /etc/munin/plugins
    patterns:
      - ntp_[0-9]*.[0-9]*.[0-9]*.[0-9]*
      - hddtempd
    file_type: link
  register: munin_plugins_to_delete

- name: remove extraneous munin checks (wildcard)
  file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ munin_plugins_to_delete.files }}"
  become: true
  notify: restart munin-node

- name: remove extraneous munin checks (hwmon wildcard)
  file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ munin_plugins_to_possibly_delete_hwmon.files }}"
  become: true
  notify: restart munin-node
  when: not hwmon0.stat.exists

- name: remove extraneous munin tests (all)
  file:
    dest: "/etc/munin/plugins/{{ item }}"
    state: absent
  become: true
  with_items: [ 'ntp_kernel_err', 'ntp_kernel_pll_freq', 'ntp_kernel_pll_off', 'ntp_offset', 'ntp_states', 'squid_requests', 'squid_objectsize', 'squid_cache', 'squid_traffic' ]
  notify: restart munin-node

- name: remove extraneous munin plugins (virtual machines)
  file:
    dest: "/etc/munin/plugins/{{ item }}"
    state: absent
  become: true
  with_items: [ 'hddtemp_smartctl' ]
  when: host_is_container is defined or host_is_virtual is defined or host_is_pi is defined
  notify: restart munin-node

- name: install custom numa,zfs,chrony etc munin monitoring plugins from munin-contrib, that take arguments, all hosts
  copy:
    src: "monitoring/munin/{{ item }}"
    dest: "/usr/share/munin/plugins/"
    owner: root
    group: root
    mode: 0755
    local_follow: true
  become: true
  with_items:
    - zfs_usage_
    - zfsonlinux_stats_
    - numa_
    - chrony_
    - nvme_
  notify: restart munin-node

- name: install custom nutups2_ etc munin monitoring plugins from munin-contrib, that take arguments, to UPS nut monitoring nodes
  copy:
    src: "monitoring/munin/{{ item }}"
    dest: "/usr/share/munin/plugins/"
    owner: root
    group: root
    mode: 0755
    local_follow: true
  become: true
  with_items:
    - nutups2_
  notify: restart munin-node
  when: host_is_nut_master is defined

- name: install custom chrony etc munin monitoring plugins from munin-contrib, that don't take arguments, for non-containers
  copy:
    src: "monitoring/munin/{{ item }}"
    dest: "/etc/munin/plugins/"
    owner: root
    group: root
    mode: 0755
    local_follow: true
  become: true
  with_items:
    - chrony_sourcestats
    - chrony_status
    - chrony
    - chrony_drift
    - ntp_thirdparty
    - raid
  when: host_is_container is not defined
  notify: restart munin-node

- name: install custom munin monitoring plugins from eg munin-contrib, that don't take arguments, for all hosts
  copy:
    src: "monitoring/munin/{{ item }}"
    dest: "/etc/munin/plugins/"
    owner: root
    group: root
    mode: 0755
    local_follow: true
  become: true
  with_items:
    - cpuidle
    - fail2ban
    - fail2ban_all_jails
  notify: restart munin-node

- name: existing munin plugins without params
  file:
    src: "/usr/share/munin/plugins/{{ item }}"
    dest: "/etc/munin/plugins/{{ item }}"
    state: link
  become: true
  with_items: [ 'df_abs', 'iostat', 'iostat_ios', 'netstat' ]
  when: host_is_container is not defined
  notify: restart munin-node

- name: existing munin plugins without params (physical machines)
  file:
    src: "/usr/share/munin/plugins/{{ item }}"
    dest: "/etc/munin/plugins/{{ item }}"
    state: link
  become: true
  with_items: [ 'hddtemp_smartctl' ]
  when: not ( host_is_container is defined or host_is_virtual is defined or host_is_pi is defined )
  notify: restart munin-node

- name: munin ipmi plugins without params
  file:
    src: "/usr/share/munin/plugins/ipmi_"
    dest: "/etc/munin/plugins/{{ item }}"
    state: link
  become: true
  with_items: [ 'ipmi_temp', 'ipmi_power', 'ipmi_fans', 'ipmi_volts' ]
  when: host_is_dell_server is defined
  notify: restart munin-node

- name: existing munin plugins with params
  file:
    src: "/usr/share/munin/plugins/{{ item.dest }}"
    dest: "/etc/munin/plugins/{{ item.src }}"
    state: link
  become: true
  with_items:
    - { src: 'ping_dirac', dest: 'ping_' }
    - { src: 'ping_fs', dest: 'ping_' }
    - { src: 'ping_gamow', dest: 'ping_' }
    - { src: 'ping_gw', dest: 'ping_' }
    - { src: 'ping_www.google.com.au', dest: 'ping_' }
    - { src: 'chrony_ntp.internode.com.au', dest: 'chrony_' }
  when: host_is_container is not defined
  notify: restart munin-node

- name: install custom zfs_* munin monitoring plugins that don't take arguments
  copy:
    src: "monitoring/munin/{{ item }}"
    dest: "/etc/munin/plugins/"
    owner: root
    group: root
    mode: 0755
    local_follow: true
  become: true
  with_items:
    - zfs-demand
    - zfs-general
    - zfs-hash
    - zfs-l2
    - zfs-mru-mfu
    - zfs-prefetch
    - zfsarc-l1
    - zfsarc-l2
#    - zfs-filesystem-graph
    - zfs_arcstats
    - zfs_cache_efficiency
    - zfs_list
    - zfsarcstats-counters
    - zlist
    - zpool_capacity
    - zpool_iostat
  when: host_is_zfs is defined
  notify: restart munin-node
  ignore_errors: true # munin packages are on fs, which might not be alive

  #FIXME: should work out a way of removing all stale items discovered by previous suggests that are no longer relevant (so wildcard minus current suggests result)
- name: gather and implement munin suggests
  include_tasks: munin_suggest_plugin.yml
  loop_control:
    loop_var: munin_plugin
  with_items:
    - zfs_usage_
    - numa_
    - smart_
    - sensors_
    - tasmota_
    - if_
    - if_err_
    - nutups_
#    - ipmi_  # wants to set all 4 on all hosts, so define them in dell instead

- name: existing munin plugins with params
  file:
    src: "/usr/share/munin/plugins/{{ item.dest }}"
    dest: "/etc/munin/plugins/{{ item.src }}"
    state: link
  become: true
  with_items:
    - { src: 'zfsonlinux_stats_efficiency', dest: 'zfsonlinux_stats_' }
    - { src: 'zfsonlinux_stats_cachehitlist', dest: 'zfsonlinux_stats_' }
    - { src: 'zfsonlinux_stats_cachehitdtype', dest: 'zfsonlinux_stats_' }
    - { src: 'zfsonlinux_stats_dmuprefetch', dest: 'zfsonlinux_stats_' }
    - { src: 'zfsonlinux_stats_utilization', dest: 'zfsonlinux_stats_' }
    - { src: 'zfsonlinux_stats_l2utilization', dest: 'zfsonlinux_stats_' }
    - { src: 'zfsonlinux_stats_l2efficiency', dest: 'zfsonlinux_stats_' }
  when: host_is_zfs is defined
  notify: restart munin-node

# these smart_ links are in addition to those handled by
# munin_suggest_plugin.yml, which appears to ignore devices that are
# sent through to VMs (where we still have to run the smart queries
# from).  Nope - it's ignoring SAS devices, because it can't parse the
# smartctl output of them.  That just leaves nvme devices, for which
# we have a translator configured in the monitoring role (but again,
# is not detected in the `suggests` phase.
- name: ensure all special munin links are in place for /dev files
  include_tasks: munin_dev.yml
#  with_items: { sda, sdb, sdc, sdd, sde, sdf, sdg, sdh, sdi, sdj, sdk, sdl, sdm, sdn, nvme0n1 }
  with_items: { nvme0n1, nvme0n2 }

- name: allow munin-node from fs
  lineinfile:
    path: "/etc/munin/munin-node.conf"
    line: "{{ item }}"
    state: present
  become: true
  with_items: [ 'cidr_allow 127.0.0.1/32', 'cidr_allow 192.168.1.2/24', 'cidr_deny  192.168.1.254/32' ]
  notify: restart munin-node

- name: workaround munin-node failing to start on debian bookworm on slow machines
  # host * -> host 0.0.0.0
  lineinfile:
    path: "/etc/munin/munin-node.conf"
    regexp: "^host"
    line: "host 0.0.0.0"
    state: present
  become: true
  notify: restart munin-node

- name: intercept spundown disks in hddtemp_smartctl
  ini_file:
    path: /etc/munin/plugin-conf.d/munin-node
    section: "hddtemp_smartctl"
    # no equals separating the key and value, so lets hack that up:
    allow_no_value: true
    option: "env.smartctl /usr/local/bin/smart-intercept-spindown"
    state: present
  become: true
  notify: restart munin-node

- name: intercept spundown disks in smart_*
  ini_file:
    path: /etc/munin/plugin-conf.d/munin-node
    section: "smart_*"
    # no equals separating the key and value, so lets hack that up:
    allow_no_value: true
    option: "env.smartpath /usr/local/bin/smart-intercept-spindown"
    state: present
  become: true
  notify: restart munin-node

  # FIXME: these should all be ini_file, I suspect, but do need to
  # consider what happens when we change value, given we can't specify
  # option and value
- name: Ensure munin df excludes
  lineinfile:
    path: "/etc/munin/plugin-conf.d/munin-node"
    backup: yes
    regexp: '^env.exclude none '
    insertafter: '^\[df\*\]'
    line: 'env.exclude none unknown iso9660 squashfs udf romfs ramfs debugfs'
  become: true
  notify: restart munin-node

- name: munin node conf - diskstats and chrony config
  blockinfile:
    path: "/etc/munin/plugin-conf.d/munin-node"
    marker: "# {mark} ANSIBLE MANAGED BLOCK"
    backup: yes
    block: |

      [nvme_*]
      user root

      # to transform smartctl nvme output to more resemble traditional
      # output so existing munin plugins can monitor it
      [smart_nvme*]
      user root
      env.smartpath /usr/local/bin/smartctlnvme

      # for nice devicemapper names
      [diskstats]
      user root

      # settings docuemnted in chrony_* executables
      [chrony_*]
      user _chrony
      env.timesources 2.debian.pool.ntp.org 2.debian.pool.ntp.org 2.debian.pool.ntp.org 2.debian.pool.ntp.org 192.168.1.254 ntp.superloop.com ntp.internode.com.au
      env.chrony /usr/bin/chronyc
      env.chronycpath /usr/bin/chronyc
      env.driftfile /var/lib/chrony/chrony.drift
      env.freqlimit 0.7
      env.freqskewlimit 0.3
      env.offsetlimit 0.005
      env.stddevlimit 0.001

      # If we've got ceph modules to run, run them as ceph
      [ceph*]
      user root # ceph isn't sufficient for one of the plugins - it appears to need to read the ceph conf file, which is owned root.www-data

      # Need to talk to the fail2ban socket
      [fail2ban*]
      user root

      [megacli*]
      user root

      [MegaRaid*]
      user root
      env.PATH /bin:/sbin:/opt/MegaRAID/MegaCli

      # [proxmox_count]
      [proxmox_vm_count]
      user root
      group root

  become: true
  notify: restart munin-node

- name: Ensure apt_all doesn't trigger every 5 minutes
  lineinfile:
    path: "/etc/cron.d/munin-node"
    backup: yes
    backrefs: yes
    regexp: '^\*/5 \* (.* /etc/munin/plugins/apt_all.*)'
    line: '0 */3 \1'
  become: true
  notify: restart cron


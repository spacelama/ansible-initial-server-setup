---
- name: find extraneous ntp_<dynamic> munin checks
  find:
    paths: /etc/munin/plugins
    patterns: ntp_[0-9]*.[0-9]*.[0-9]*.[0-9]*
    file_type: link
  register: munin_plugins_to_delete

  #FIXME: might need to go chrony instead of NTP if thats how we get VMs working

- name: remove extraneous ntp_<dynamic> munin checks
  file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ munin_plugins_to_delete.files }}"
  become: true
  notify: restart munin-node

- name: new munin plugins
  copy:
    src: "/etc/munin/plugins/{{ item }}"
    dest: "/etc/munin/plugins/{{ item }}"
    owner: root
    group: root
    mode: 0755
  become: true
  with_items: [ 'cpuidle', 'fail2ban_all_jails', 'ntp_thirdparty', 'fail2ban' ]
  notify: restart munin-node

- name: existing munin plugins without params
  file:
    src: "/usr/share/munin/plugins/{{ item }}"
    dest: "/etc/munin/plugins/{{ item }}"
    state: link
  become: true
  with_items: [ 'df_abs', 'iostat', 'iostat_ios', 'netstat' ]
  when: host_is_container is not defined
  notify: restart munin-node


- name: existing munin plugins without params (physical machines)
  file:
    src: "/usr/share/munin/plugins/{{ item }}"
    dest: "/etc/munin/plugins/{{ item }}"
    state: link
  become: true
  with_items: [ 'hddtemp_smartctl', 'hddtempd' ]
  when: not ( host_is_container is defined or host_is_virtual is defined or host_is_pi is defined )
  notify: restart munin-node

- name: remove extraneous munin plugins (virtual machines)
  file:
    dest: "/etc/munin/plugins/{{ item }}"
    state: absent
  become: true
  with_items: [ 'hddtemp_smartctl', 'hddtempd' ]
  when: host_is_container is defined or host_is_virtual is defined or host_is_pi is defined
  notify: restart munin-node
  
- name: munin ipmi plugins without params
  file:
    src: "/usr/share/munin/plugins/ipmi_"
    dest: "/etc/munin/plugins/{{ item }}"
    state: link
  become: true
  with_items: [ 'ipmi_temp', 'ipmi_power', 'ipmi_fans' ]
  when: host_is_dell_server is defined
  notify: restart munin-node

- name: munin sensors plugins without params
  file:
    src: "/usr/share/munin/plugins/sensors_"
    dest: "/etc/munin/plugins/{{ item }}"
    state: link
  become: true
  with_items: [ 'sensors_temp' ]
  when: host_is_dell_server is defined
  notify: restart munin-node

- name: remove extaneous munin tests
  file:
    dest: "/etc/munin/plugins/{{ item }}"
    state: absent
  become: true
  with_items: [ 'ntp_kernel_err', 'ntp_kernel_pll_freq', 'ntp_kernel_pll_off', 'ntp_offset', 'ntp_states', 'squid_requests', 'squid_objectsize', 'squid_cache', 'squid_traffic' ]
  notify: restart munin-node

- name: existing munin plugins with params
  file:
    src: "/usr/share/munin/plugins/{{ item.dest }}"
    dest: "/etc/munin/plugins/{{ item.src }}"
    state: link
  become: true
  with_items:
    - { src: 'ping_dirac', dest: 'ping_' }
    - { src: 'ping_fs', dest: 'ping_' }
    - { src: 'ping_gamow', dest: 'ping_' }
    - { src: 'ping_gw', dest: 'ping_' }
    - { src: 'ping_www.google.com.au', dest: 'ping_' }
  when: host_is_container is not defined
  notify: restart munin-node

- name: install munin zfs_*
  copy:
    src: ./src/monitoring/munin/{{ item }}
    dest: /etc/munin/plugins/{{ item }}
    owner: root
    group: root
    mode: 0755
    local_follow: true
  become: true
  with_items:
    - zfs-demand
    - zfs-general
    - zfs-hash
    - zfs-l2
    - zfs-mru-mfu
    - zfs-prefetch
    - zfsarc-l1
    - zfsarc-l2
    - zfs-filesystem-graph
    - zfs_arcstats
    - zfs_cache_efficiency
    - zfs_list
    - zfsarcstats-counters
    - zlist
    - zpool_capacity
    - zpool_iostat
  when: host_is_zfs is defined
  notify: restart munin-node

- name: install munin zfs_*_
  copy:
    src: ./src/monitoring/munin/{{ item }}
    dest: /usr/share/munin/plugins/{{ item }}
    owner: root
    group: root
    mode: 0755
    local_follow: true
  become: true
  with_items:
    - zfs_usage_
    - zfsonlinux_stats_
    - numa_

- name: gather and implement munin suggests
  include_tasks: munin_suggest_plugin.yml
  loop_control:
    loop_var: munin_plugin
  with_items:
    - zfs_usage_
    - zfsonlinux_stats_
    - numa_
    - smart_

- name: allow munin-node from fs
  lineinfile:
    path: "/etc/munin/munin-node.conf"
    line: "{{ item }}"
    state: present
  become: true
  with_items: [ 'cidr_allow 127.0.0.1/32', 'cidr_allow 192.168.1.2/24', 'cidr_deny  192.168.1.254/32' ]
  notify: restart munin-node

- name: Ensure munin df excludes
  lineinfile:
    path: "/etc/munin/plugin-conf.d/munin-node"
    backup: yes
    regexp: '^env.exclude none '
    insertafter: '^\[df\*\]'
    line: 'env.exclude none unknown iso9660 squashfs udf romfs ramfs debugfs'
  become: true
  notify: restart munin-node

- name: Ensure munin df excludes
  blockinfile:
    path: "/etc/munin/plugin-conf.d/munin-node"
    marker: "# {mark} ANSIBLE MANAGED BLOCK"
    backup: yes
    block: |
      
      #for nice devicemapper names
      [diskstats]
      user root
  become: true
  notify: restart munin-node
  
- name: Ensure apt_all doesn't trigger every 5 minutes
  lineinfile:
    path: "/etc/cron.d/munin-node"
    backup: yes
    backrefs: yes
    regexp: '^\*/5 \* (.* /etc/munin/plugins/apt_all.*)'
    line: '0 */3 \1'
  become: true
  notify: restart cron


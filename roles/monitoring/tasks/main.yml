---
  # we need munin-async because some plugins just take a very long
  # time to answer when something is down, so collecting them
  # asynchronously helps.  But that currently has its own problems
- name: Install node monitoring and monitoring acceleration packages
  apt:
    name: ['munin-node', 'munin-async', 'munin-plugins-extra']
    autoremove: no
    state: present
  become: true

- name: Install monitoring packages (except for containers)
  apt:
    name: ['libdata-validate-ip-perl'] # libdata-validate-ip-perl needed for chronyc munin plugin
    autoremove: no
    state: present
  become: true
  when: not (host_is_container | default(false))

- name: Install monitoring packages for webservers
  apt:
    name: ['libwww-perl']
    autoremove: no
    state: present
  become: true
  when: (host_is_user_web_server | default(false)) or (host_is_ext_web_server | default(false))

- name: intercept spundown disks in hddtemp_smartctl
  ini_file:
    path: /etc/munin/plugin-conf.d/munin-node
    section: "hddtemp_smartctl"
    # no equals separating the key and value, so lets hack that up:
    allow_no_value: true
    option: "env.smartctl /usr/local/bin/smart-intercept-spindown"
    state: present
  become: true
  notify: restart munin-node

  # FIXME: these should all be ini_file, I suspect, but do need to
  # consider what happens when we change value, given we can't specify
  # option and value
- name: Ensure munin df excludes
  lineinfile:
    path: "/etc/munin/plugin-conf.d/munin-node"
    backup: yes
    regexp: '^env.exclude none '
    insertafter: '^\[df\*\]'
    line: 'env.exclude none unknown iso9660 squashfs udf romfs ramfs debugfs'
  become: true
  notify: restart munin-node

- name: munin node conf - insert common config
  blockinfile:
    path: "/etc/munin/plugin-conf.d/munin-node"
    marker: "# {mark} ANSIBLE MANAGED BLOCK"
    backup: yes
    block: |

      [nvme_*]
      user root

      # to parse both SAS, NVME, and not spin a disk up (it is not
      # sufficient to simply set ignorestandby to get munin plugin to
      # supply smartctl -n standby, because that still spins up many
      # of our drives):
      [smart_*]
      user root
      env.smartpath /usr/local/bin/smart-intercept-spindown

      # for nice devicemapper names
      [diskstats]
      user root

      # settings docuemnted in chrony_* executables
      [chrony_*]
      user _chrony
      env.timesources 2.debian.pool.ntp.org 2.debian.pool.ntp.org 2.debian.pool.ntp.org 2.debian.pool.ntp.org 192.168.1.254 ntp.superloop.com ntp.internode.com.au
      env.chrony /usr/bin/chronyc
      env.chronycpath /usr/bin/chronyc
      env.driftfile /var/lib/chrony/chrony.drift
      env.freqlimit 0.7
      env.freqskewlimit 0.3
      env.offsetlimit 0.005
      env.stddevlimit 0.001

      # If we've got ceph modules to run, run them as ceph
      [ceph*]
      user root # ceph isn't sufficient for one of the plugins - it appears to need to read the ceph conf file, which is owned root.www-data

      # Need to talk to the fail2ban socket
      [fail2ban*]
      user root

      [megacli*]
      user root

      [MegaRaid*]
      user root
      env.PATH /bin:/sbin:/opt/MegaRAID/MegaCli

      # [proxmox_count]
      [proxmox_vm_count]
      user root
      group root

      [nutups_*]
      user nut
      group nut

      [digitemp_*]
      user nut
      group dialout
      env.warning 60
      env.critical 70

      {{ munin_nut_config if host_is_nut_master | default(false) }}

  become: true
  notify: restart munin-node

- name: determine if any hardware monitors exist
  stat: path=/sys/class/hwmon/hwmon0
  register: hwmon0

- name: find possibly extraneous munin checks (hwmon wildcard)
  find:
    paths: /etc/munin/plugins
    file_type: any
    patterns:
      - sensors_*
  register: munin_plugins_to_possibly_delete_hwmon

- name: find extraneous munin checks (ntp wildcards and list)
  find:
    paths: /etc/munin/plugins
    file_type: any
    patterns: "{{ remove_munin_plugins }}"
  register: munin_plugins_to_delete

- name: remove extraneous munin checks (ntp wildcards and list)
  file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ munin_plugins_to_delete.files }}"
  become: true
  notify: restart munin-node

- name: remove extraneous munin checks (hwmon wildcard for when no hwmon devices exist)
  file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ munin_plugins_to_possibly_delete_hwmon.files }}"
  become: true
  notify: restart munin-node
  when: not hwmon0.stat.exists

- name: remove extraneous munin plugins without params (pi or non virtual nor container; ie, physical machines including pi)
  file:
    path: "/etc/munin/plugins/{{ item }}"
    state: absent
  become: true
  with_items: "{{ pi_or_non_virtual_nor_container_munin_plugins }}"
  when: not (host_is_pi | default(false) or not ( host_is_container | default(false) or host_is_virtual | default(false) ) )
  notify: restart munin-node

- name: remove extraneous munin plugins without params (non virtual nor container nor pi; ie, physical machines but not including pi)
  file:
    path: "/etc/munin/plugins/{{ item }}"
    state: absent
  become: true
  with_items: "{{ non_virtual_nor_container_nor_pi_munin_plugins }}"
  when: host_is_container | default(false) or host_is_virtual | default(false) or host_is_pi | default(false)
  notify: restart munin-node

- name: remove monitoring plugins not used in containers with params
  file:
    path: "/etc/munin/plugins/{{ item.src }}"
    state: absent
  become: true
  with_items: "{{ non_container_munin_plugins_with_args }}"
  when: host_is_container | default(false)
  notify: restart munin-node

- name: remove existing munin plugins with params
  file:
    path: "/etc/munin/plugins/{{ item.src }}"
    state: absent
  become: true
  with_items: "{{ zfs_munin_plugins_with_args }}"
  when: not (host_is_zfs | default(false))
  notify: restart munin-node

- name: remove dell ipmi munin plugins without params
  file:
    path: "/etc/munin/plugins/{{ item }}"
    state: absent
  become: true
  with_items: "{{ dell_ipmi_munin_plugins }}"
  when: not (host_is_dell_server | default(false))
  notify: restart munin-node

- name: remove custom zfs_* munin monitoring plugins that don't take arguments
  file:
    path: "/etc/munin/plugins/{{ item }}"
    state: absent
  become: true
  with_items: "{{ zfs_custom_munin_plugins }}"
  when: not (host_is_zfs | default(false))
  notify: restart munin-node

- name: remove custom munin monitoring plugins from munin-contrib, that don't take arguments, for non-virtual nor containers
  file:
    path: "/etc/munin/plugins/{{ item }}"
    state: absent
  become: true
  with_items: "{{ non_virtual_non_container_custom_munin_plugins }}"
  when: host_is_container | default(false) or host_is_virtual | default(false)
  notify: restart munin-node

- name: remove custom munin monitoring plugins from munin-contrib, that don't take arguments, for non-containers
  file:
    path: "/etc/munin/plugins/{{ item }}"
    state: absent
  become: true
  with_items: "{{ non_container_custom_munin_plugins }}"
  when: host_is_container | default(false)
  notify: restart munin-node

- name: remove existing munin plugins without params (non containers)
  file:
    path: "/etc/munin/plugins/{{ item }}"
    state: absent
  become: true
  with_items: "{{ non_container_munin_plugins }}"
  when: host_is_container | default(false)
  notify: restart munin-node

- name: install custom munin monitoring plugins from munin-contrib, that take arguments, all hosts except containers
  copy:
    src: "monitoring/munin/{{ item }}"
    dest: "/usr/share/munin/plugins/"
    owner: root
    group: root
    mode: 0755
    local_follow: true
  become: true
  # would love to just put our modified plugins that are already in
  # upstream, directly into /etc/munin/plugins, but these are the ones
  # that take arguments, so they need to go somewhere!
  with_items: "{{ non_container_custom_munin_plugins_with_args }}"
  when: not (host_is_container | default(false))
  notify: restart munin-node

- name: install custom nutups2_ etc munin monitoring plugins from munin-contrib, that take arguments, to UPS nut monitoring nodes
  copy:
    src: "monitoring/munin/{{ item }}"
    dest: "/usr/share/munin/plugins/"
    owner: root
    group: root
    mode: 0755
    local_follow: true
  become: true
  with_items:
    - nutups2_
  notify: restart munin-node
  when: host_is_nut_master | default(false)

- name: install webserver ssl munin monitoring plugins from munin-contrib, that take arguments, for hosts serving ssl https
  copy:
    src: "monitoring/munin/{{ item }}"
    dest: "/usr/share/munin/plugins/"
    owner: root
    group: root
    mode: 0755
    local_follow: true
  become: true
  with_items:
    - ssl_
  notify: restart munin-node
  when: host_is_ext_web_server | default(false)

- name: existing apache munin plugins without params
  file:
    src: "/usr/share/munin/plugins/{{ item }}"
    dest: "/etc/munin/plugins/{{ item }}"
    state: link
  become: true
  with_items:
    - apache_accesses
    - apache_processes
    - apache_volume
  when: (host_is_user_web_server | default(false)) or (host_is_ext_web_server | default(false))
  notify: restart munin-node

- name: install zram munin monitoring plugins from eg munin-contrib, that don't take arguments, for hosts with zram configured
  copy:
    src: "monitoring/munin/{{ item }}"
    dest: "/etc/munin/plugins/"
    owner: root
    group: root
    mode: 0755
    local_follow: true
  become: true
  with_items:
    - zram
  notify: restart munin-node
  when: "'systemd-zram-generator' in ansible_facts.packages"

- name: install custom munin monitoring plugins from eg munin-contrib, that don't take arguments, for all hosts
  copy:
    src: "monitoring/munin/{{ item }}"
    dest: "/etc/munin/plugins/"
    owner: root
    group: root
    mode: 0755
    local_follow: true
  become: true
  with_items: "{{ custom_munin_plugins }}"
  notify: restart munin-node

- name: install custom munin monitoring plugins from munin-contrib, that don't take arguments, for non-virtual nor containers
  copy:
    src: "monitoring/munin/{{ item }}"
    dest: "/etc/munin/plugins/"
    owner: root
    group: root
    mode: 0755
    local_follow: true
  become: true
  with_items: "{{ non_virtual_non_container_custom_munin_plugins }}"
  when: not (host_is_container | default(false) or host_is_virtual | default(false) )
  notify: restart munin-node

- name: install custom munin monitoring plugins from munin-contrib, that don't take arguments, for non-containers
  copy:
    src: "monitoring/munin/{{ item }}"
    dest: "/etc/munin/plugins/"
    owner: root
    group: root
    mode: 0755
    local_follow: true
  become: true
  with_items: "{{ non_container_custom_munin_plugins }}"
  when: not (host_is_container | default(false))
  notify: restart munin-node

- name: existing munin plugins without params
  file:
    src: "/usr/share/munin/plugins/{{ item }}"
    dest: "/etc/munin/plugins/{{ item }}"
    state: link
  become: true
  with_items: "{{ munin_plugins }}"
  notify: restart munin-node

- name: install existing munin plugins without params (non containers)
  file:
    src: "/usr/share/munin/plugins/{{ item }}"
    dest: "/etc/munin/plugins/{{ item }}"
    state: link
  become: true
  with_items: "{{ non_container_munin_plugins }}"
  when: not (host_is_container | default(false))
  notify: restart munin-node

- name: enable existing munin plugins without params (pi or non virtual nor container; ie, physical machines including pi)
  file:
    src: "/usr/share/munin/plugins/{{ item }}"
    dest: "/etc/munin/plugins/{{ item }}"
    state: link
  become: true
  with_items: "{{ pi_or_non_virtual_nor_container_munin_plugins }}"
  when: host_is_pi | default(false) or not ( host_is_container | default(false) or host_is_virtual | default(false) )
  notify: restart munin-node

- name: enable existing munin plugins without params (non virtual nor container nor pi; ie, physical machines but not including pi)
  file:
    src: "/usr/share/munin/plugins/{{ item }}"
    dest: "/etc/munin/plugins/{{ item }}"
    state: link
  become: true
  with_items: "{{ non_virtual_nor_container_nor_pi_munin_plugins }}"
  when: not ( host_is_container | default(false) or host_is_virtual | default(false) or host_is_pi | default(false) )
  notify: restart munin-node

- name: dell ipmi munin plugins without params
  file:
    src: "/usr/share/munin/plugins/ipmi_"
    dest: "/etc/munin/plugins/{{ item }}"
    state: link
  become: true
  with_items: "{{ dell_ipmi_munin_plugins }}"
  when: host_is_dell_server | default(false)
  notify: restart munin-node

- name: existing munin plugins with params
  file:
    src: "/usr/share/munin/plugins/{{ item.dest }}"
    dest: "/etc/munin/plugins/{{ item.src }}"
    state: link
  become: true
  with_items: "{{ non_container_munin_plugins_with_args }}"
  when: not (host_is_container | default(false))
  notify: restart munin-node

- name: install custom zfs_* munin monitoring plugins that don't take arguments
  copy:
    src: "monitoring/munin/{{ item }}"
    dest: "/etc/munin/plugins/"
    owner: root
    group: root
    mode: 0755
    local_follow: true
  become: true
  with_items: "{{ zfs_custom_munin_plugins }}"
  when: host_is_zfs | default(false)
  notify: restart munin-node
  ignore_errors: true # munin packages are on fs, which might not be alive

- name: existing zfs munin plugins with params
  file:
    src: "/usr/share/munin/plugins/{{ item.dest }}"
    dest: "/etc/munin/plugins/{{ item.src }}"
    state: link
  become: true
  with_items: "{{ zfs_munin_plugins_with_args }}"
  when: host_is_zfs | default(false)
  notify: restart munin-node

  # FIXME: should work out a way of removing all stale items
  # discovered by previous suggests that are no longer relevant (so
  # wildcard minus current suggests result)
- name: gather and implement munin suggests, all hosts
  include_tasks: munin_suggest_plugin.yml
  loop_control:
    loop_var: munin_plugin
  with_items: "{{ munin_suggests }}"

- name: gather and implement munin suggests, all hosts except containers
  include_tasks: munin_suggest_plugin.yml
  loop_control:
    loop_var: munin_plugin
  with_items: "{{ non_container_munin_suggests }}"
  when: not (host_is_container | default(false))

- name: optional extra existing munin plugins with params
  file:
    src: "/usr/share/munin/plugins/{{ item.dest }}"
    dest: "/etc/munin/plugins/{{ item.src }}"
    state: link
  become: true
  with_items: "{{ munin_plugin_links | default([]) }}"
  notify: restart munin-node

- name: Ensure apt_all doesn't trigger every 5 minutes
  lineinfile:
    path: "/etc/cron.d/munin-node"
    backup: yes
    backrefs: yes
    regexp: '^\*/5 \* (.* /etc/munin/plugins/apt_all.*)'
    line: '0 */3 \1'
  become: true
  notify: restart cron

- name: create ssh directory for munin-async
  file:
    path: "/var/lib/munin-async/.ssh/"
    state: directory
    owner: munin-async
    group: munin-async
  become: true

- name: create ssh authorized_keys for munin-async
  copy:
    dest: "/var/lib/munin-async/.ssh/authorized_keys"
    content: "no-port-forwarding,no-agent-forwarding,no-X11-forwarding,no-pty,no-user-rc,command=\"/usr/share/munin/munin-async --spooldir /var/lib/munin-async --spoolfetch\" {{ munin_async_ssh_key }}\n"
    owner: munin-async
    group: munin-async
  become: true

- name: ensures /etc/systemd/system/munin-async.service.d/ dir exists
  file:
    path: /etc/systemd/system/munin-async.service.d/
    state: directory
  become: true

- name: try to get munin-async not to discard data - https://github.com/munin-monitoring/munin/issues/1429
  # also: https://github.com/munin-monitoring/munin/issues/617
  # https://github.com/munin-monitoring/munin/issues/619
  # https://github.com/munin-monitoring/munin/issues/634
  # https://github.com/munin-monitoring/munin/issues/720
  # WARNING: be careful with --fork (doesn't seem to be a problem on dirac, iot and pve1,2,3 at 20231224.  pi could be a problem.  OOMs could be a problem at times on pve1,2,3).  This is relevant: https://github.com/munin-monitoring/munin/issues/1207
  copy:
    dest: /etc/systemd/system/munin-async.service.d/override.conf
    content: "[Service]\n# https://serverfault.com/questions/1006514/systemd-timer-for-unattended-upgrades ExecStart for some stupid reason are cumulative, so should be reset:\nExecStart=\nExecStart=/usr/share/munin/munin-asyncd --fork\n"
  become: true
  notify: restart munin-async
  when: not (munin_no_fork | default(false))

- name: Make sure all handlers run
  meta: flush_handlers

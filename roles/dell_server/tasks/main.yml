---
- name: copy poweredge-fand.conf
  copy:
    src: R710-Fan-Control/poweredge-fand.conf
    dest: /etc/poweredge-fand.conf
    owner: root
    group: root
    mode: 0644
  become: true

- name: copy poweredge-fand
  copy:
    src: R710-Fan-Control/poweredge-fand.pl
    dest: /usr/local/bin/poweredge-fand.pl
    owner: root
    group: root
    mode: 0755
  become: true
  notify: enable and restart poweredge-fand

- name: install poweredge-fand systemd target
  copy:
    src: R710-Fan-Control/poweredge-fand.service
    dest: /etc/systemd/system/poweredge-fand.service
    owner: root
    group: root
    mode: 0644
  become: true
  notify: enable and restart poweredge-fand

- name: enable poweredge-fand systemd target
  # systemd rather than service because we're explicitly installing our own systemd units
  systemd:
    name: poweredge-fand
    enabled: "{{ poweredge_fand_is_enabled | default('yes') }}"
    state: "{{ 'started' if (poweredge_fand_is_enabled | default('yes')) else omit }}"
  become: true
  ignore_errors: true  # fails when not in systemd, or still in the
                       # installation environment, etc

- name: make apt keyrings directory
  file:
    path="/etc/apt/keyrings"
    state=directory
  become: true

# https://forum.proxmox.com/threads/dell-openmanage-on-proxmox-6-x.57932/post-522534
# https://docs.ansible.com/ansible/latest/collections/ansible/builtin/apt_repository_module.html
- name: Add dell openmanage repo
  block:
    - name: dell repo | no apt key
      ansible.builtin.get_url:
        url: https://linux.dell.com/repo/pgp_pubkeys/0x1285491434D8786F.asc
        dest: /etc/apt/keyrings/linux.dell.com.0x1285491434D8786F.asc

    - name: dell repo | apt source
      copy: # should be apt_repository, but https://github.com/ansible/ansible/issues/58386 https://github.com/ansible/ansible/issues/61420 closed WONTFIX
        content: "deb [arch=amd64 signed-by=/etc/apt/keyrings/linux.dell.com.0x1285491434D8786F.asc] https://linux.dell.com/repo/community/openmanage/{{ dell_omsa_version }} main\n"
        dest: "/etc/apt/sources.list.d/linux.dell.com.sources.list"
  become: true

#- name: Check if sfcb libcimcclient0 and libssl1.0.2 is installed
#  shell: "dpkg-query -W --showformat='${Status}\n' sfcb libcimcclient0 libssl1.0.2 libwsman-server1_2.6.5-0ubuntu3_amd64.deb 2>&1 | grep -v '^install ok installed$' | grep -q ."
#  register: archived_package_check_deb
#  failed_when: archived_package_check_deb.rc > 1
#  changed_when: archived_package_check_deb.rc == 0

- name: Ensures ~ansible/Downloads dir exists
  file:
    path="/home/{{ ansible_env.USER }}/Downloads"
    state=directory

- name: remove prohibited packages
  apt:
    name: ['libwsman-client2']
    state: absent
  become: true

  #install ipmitool>= 1.8.19-6 on debian 12:
  #https://forum.proxmox.com/threads/ipmi-tool-error-after-v8-upgrade.129334/
- name: install archived dell hardware packages (bookworm)
  include_tasks: "{{ playbook_dir }}/roles/common/tasks/install_custom_packages.yml"
  vars:
    apt_preferences_hold_suffix: "-dell_server-bookworm"
    install_packages: "{{ srvadmin_depends_bookworm }}"
  when: deb_release == 'bookworm'

- name: install archived dell hardware packages (all)
  include_tasks: "{{ playbook_dir }}/roles/common/tasks/install_custom_packages.yml"
  vars:
    apt_preferences_hold_suffix: "-dell_server-all"
    install_packages: "{{ srvadmin_depends }}"

- name: install archived dell megacli (all)
  include_tasks: "{{ playbook_dir }}/roles/common/tasks/install_custom_packages.yml"
  vars:
    apt_preferences_hold_suffix: "-dell_server-megacli"
    install_packages:
    - "megacli_8.07.14-2_all.deb"

- name: Install dell tools
  apt:
    name: ['srvadmin-all', 'ipmitool', 'ledmon']
#FIXME: do we only care about idracadm8, or do we need all the other stuff in -all?  -all needs a bunch of dependencies that might not work on pve1...
# FIXME: yes, it appears we need all that to get dsm_*_* etc to report back OS data to the idrac
#    name: ['srvadmin-idracadm8', 'ipmitool', 'ledmon']
    update_cache: yes
    cache_valid_time: 0
    autoremove: no
    state: present
  become: true

- name: install megacli etc munin monitoring plugins from munin-contrib, that don't take arguments
  copy:
    src: monitoring/munin/{{ item }}
    dest: /etc/munin/plugins/{{ item }}
    owner: root
    group: root
    mode: 0755
    local_follow: true
  become: true
  with_items:
   - megacli_hdd-temperature-using-megacli
  notify: restart munin-node

- name: install megacli etc munin monitoring plugins from munin-contrib, that take arguments
  copy:
    src: monitoring/munin/{{ item }}
    dest: /usr/share/munin/plugins/{{ item }}
    owner: root
    group: root
    mode: 0755
    local_follow: true
  become: true
  with_items:
    - MegaRaid_
  notify: restart munin-node

- name: existing munin plugins with params
  file:
    src: "/usr/share/munin/plugins/{{ item.dest }}"
    dest: "/etc/munin/plugins/{{ item.src }}"
    state: link
  become: true
  with_items:
    - { src: 'MegaRaid_0_error',      dest: 'MegaRaid_' }
    - { src: 'MegaRaid_0_other',      dest: 'MegaRaid_' }
    - { src: 'MegaRaid_0_temp',       dest: 'MegaRaid_' }
    - { src: 'MegaRaid_0_predictive', dest: 'MegaRaid_' }
  notify: restart munin-node

- name: install megaclisas-status
  copy:
    src: megaclisas-status
    dest: /usr/local/bin/megaclisas-status
    mode: 0755
  become: true

- name: Make sure all handlers run
  meta: flush_handlers

---
- name: Enable default set of repositories
  copy:
    src: ./src/apt/sources.list
    dest: /etc/apt/sources.list
    owner: root
    group: root
    mode: 0644
  become: true
  when: host_is_container is not defined and host_is_pi is not defined and host_is_still_debian_buster is not defined

- name: Enable apt backports
  copy:
    src: ./src/apt/sources.list.d.backports.list
    dest: /etc/apt/sources.list.d/backports.list
    owner: root
    group: root
    mode: 0644
  become: true
  when: host_has_backports is defined

#- name: Update all packages
#  apt:
#    update_cache: yes
#    upgrade: safe
#    autoremove: no

- name: Configure tzdata
  block:
    - name: Configure timezone country
      debconf:
        name: tzdata
        question: tzdata/Areas
        value: "Australia"
        vtype: select
      become: true
      notify: Reconfigure tzdata

    - name: Configure timezone city
      debconf:
        name: tzdata
        question: tzdata/Zones/Australia
        value: "Melbourne"
        vtype: select
      become: true
      notify: Reconfigure tzdata
  always:
    - name: Make sure all handlers run
      meta: flush_handlers

- name: Ensure ntp starts on a fresh reboot
  service:
    name: ntp
    state: started
    enabled: yes
  become: true
  when: host_is_container is not defined

  #FIXME: might need to go chrony instead of NTP if thats how we get VMs working

  # WARNING: on ZFS you also need to set org.debian:periodic-trim on each zpool!
- name: Ensure fstrim timer runs
  service:
    name: fstrim.timer
    state: started
    enabled: yes
  become: true
  when: host_is_container is not defined

- name: Remove erroneous packages
  apt:
    name: ['locales-all', 'tuned', 'tuned-utils', 'tuned-utils-systemtap']
    state: absent
  become: true

- name: Update APT Package Manager
  apt:
    update_cache: yes
  become: true
  when: quick is not defined
  ignore_errors: true

- name: Install essential packages (all)
  apt:
    name: ['needrestart', 'rsync', 'munin-node']
    autoremove: no
    state: present
  become: true

- name: Configure locales
  block:
    - name: List of locales
      debconf:
        name: locales
        question: locales/locales_to_be_generated
        value: "en_AU.UTF-8 UTF-8, en_AU ISO-8859-1, en_DK ISO-8859-1, en_DK.ISO-8859-15 ISO-8859-15, en_DK.UTF-8 UTF-8, en_GB ISO-8859-1, en_GB.ISO-8859-15 ISO-8859-15, en_GB.UTF-8 UTF-8"
        vtype: multiselect
      become: true
      notify: Reconfigure locales

    - name: Configure default locale
      debconf:
        name: locales
        question: locales/default_environment_locale
        value: "en_AU.UTF-8"
        vtype: select
      become: true
      notify: Reconfigure locales
  always:
    - name: Make sure all handlers run
      meta: flush_handlers

- name: Install essential packages (not container)
  apt:
    name: ['git', 'htop', 'iotop', 'smem', 'ethtool', 'net-tools', 'iperf3',  'aptitude', 'dlocate', 'vim', 'sysstat', 'nicstat', 'lshw', 'parted', 'sdparm', 'ntpdate', 'colordiff', 'ifstat', 'iftop', 'apt-listchanges', 'apt-show-versions', 'etckeeper', 'apt-listbugs', 'apt-listbugs', 'rlwrap', 'strace', 'procmail', 'make', 'keychain', 'libstring-shellquote-perl', 'dmidecode']
    # atop
    autoremove: no
    state: present
    install_recommends: no
  become: true
  when: host_is_container is not defined

- name: Remove previously essential but no longer current packages
  apt:
    name: ['uswsusp']
    autoremove: no
    state: absent
  become: true

- name: Install intel microcode
  apt:
    name: ['intel-microcode']
    autoremove: no
    state: present
  become: true
  # repos might not be set up correctly yet if still in check_mode, so
  # these packages might not yet be available
  when: host_is_intel is defined and not ansible_check_mode

- name: Install amd microcode
  apt:
    name: ['amd64-microcode']
    autoremove: no
    state: present
  become: true
  # repos might not be set up correctly yet if still in check_mode, so
  # these packages might not yet be available
  when: host_is_amd is defined and not ansible_check_mode

- name: Remove intel and amd microcode
  apt:
    name: ['amd64-microcode', 'intel-microcode']
    autoremove: no
    state: absent
  become: true
  when: host_is_intel is not defined and host_is_amd is not defined

#- name: Enable unattended upgrades
#  copy:
#    src: ./src/apt/10periodic
#    dest: /etc/apt/apt.conf.d/10periodic
#    owner: root
#    group: root
#    mode: 0644

- name: allow backuppc to check all mountpoints
  copy:
    src: /home/tconnors/bin/is_all_mounted
    dest: /usr/local/bin/is_all_mounted
    owner: root
    group: root
    mode: 0755
  become: true

- name: setup apt listchanges news
  lineinfile:
    dest: /etc/apt/listchanges.conf
    backrefs: yes
    regexp: '^(which=news)'
    line: '#\1\nwhich=both'
    state: present
  become: true
  when: host_is_container is not defined

- name: setup apt listchanges confirm
  lineinfile:
    dest: /etc/apt/listchanges.conf
    regexp: '^confirm='
    line: 'confirm=false'
    state: present
  become: true
  when: host_is_container is not defined

- name: "listbugs, but don't ask questions"
  lineinfile:
    dest: /etc/apt/apt.conf.d/10apt-listbugs
    regexp: '^.*DPkg::Pre-Install-Pkgs'
    line: '// DPkg::Pre-Install-Pkgs {"/usr/sbin/apt-listbugs apt";};'
    state: present
  become: true
  # listbugs might not be installed yet if still in check_mode, so
  # don't run anything relying on the conffile being there
  when: host_is_container is not defined and not ansible_check_mode

- name: stop restricting dmesg pointlessly
  copy:
    dest: /etc/sysctl.d/10-local.conf
    content: "kernel.dmesg_restrict = 0\n"
    owner: root
    group: root
    mode: 0644
  become: true
  notify: restart sysctl

- name: copy /usr/local/bin/get_conf_info
  copy:
    dest: /usr/local/bin/get_conf_info
    src: ./src/cron/cron.daily_get_conf_info
    owner: root
    group: root
    mode: 0755
  become: true

- name: install cron.daily.get_conf_info custom host helpers
  copy:
    src: "{{ item }}"
    dest: "{{ item | regex_replace('.*get_conf_info.' + hostname, '/usr/local/bin/get_conf_info') }}"
    owner: root
    group: root
    mode: 0755
  become: true
  with_fileglob:
    - "./src/cron/cron.daily_get_conf_info.{{ hostname }}*"

- name: install cron.daily switch password conf file if defined for this host
  copy:
    content: "{{ switch_pass }}"
    dest: /usr/local/etc/get_conf_info.switch.pass
    owner: root
    group: root
    mode: 0600
  become: true
  when: switch_pass is defined

- name: install cron.daily.get_conf_info
  file:
    src: /usr/local/bin/get_conf_info
    dest: /etc/cron.daily/get_conf_info
    state: link
    force: yes
  become: true

- name: copy /usr/local/bin/backuppc_check_backups
  copy:
    dest: /usr/local/bin/backuppc_check_backups
    src: ./src/cron/cron.daily_backuppc_check_backups
    owner: root
    group: root
    mode: 0755
  become: true

- name: install cron.daily.backuppc_check_backups
  file:
    src: /usr/local/bin/backuppc_check_backups
    dest: /etc/cron.daily/backuppc_check_backups
    state: link
    force: yes
  become: true

# https://forum.proxmox.com/threads/oom-kill-process-inside-lxc-memory-cgroup-out-of-memory.65106/
- name: ensure /var/log/journal persistent journal exists
  file:
    dest: /var/log/journal
    state: directory
  become: true

- name: determine if systemd login needs tweaking
  stat: path=/etc/systemd/logind.conf
  register: systemd_logind

- name: Unscrew systemd login defaults
  lineinfile:
    dest: /etc/systemd/logind.conf
    line: HandlePowerKey=suspend
    regexp: ^HandlePowerKey=
    state: present
  become: true
  when: systemd_logind.stat.exists
  notify: restart systemd-logind

- name: Unscrew systemd login defaults
  lineinfile:
    dest: /etc/systemd/logind.conf
    line: KillUserProcesses=no
    regexp: ^KillUserProcesses=
    state: present
  become: true
  when: systemd_logind.stat.exists
  notify: restart systemd-logind

- name: fix up utterly braindead config file defaults
  include_tasks: fixup_user_conf_files.yml
  loop_control:
    loop_var: user
  with_items: "{{ fixup_conf_files.users }}"

- name: "Remove undesired flags from grub config"
  lineinfile:
    dest: /etc/default/grub
    backrefs: yes
    regexp: "^GRUB_CMDLINE_LINUX_DEFAULT=\"(.*) *{{ item }} *(.*)\""
    line: "GRUB_CMDLINE_LINUX_DEFAULT=\"\\1\\2\""
    state: present
  become: true
  with_items: { quiet, "   *" }
  notify: "Regenerate grub config"
  when: host_is_container is not defined and host_is_pi is not defined

- name: fix defaults in grub config
  lineinfile:
    dest: "/etc/default/grub"
    line: "{{ item }}"
  become: true
  with_items:
    - "#debian bug #717586"
    - "#Is it 'info grub'->Configuration->Simple Configuration:"
    - "GRUB_DISABLE_SUBMENU=y"
  notify: "Regenerate grub config"
  when: host_is_container is not defined and host_is_pi is not defined

- name: determine if smartmontools config exists
  stat: path=/etc/default/smartmontools
  register: smartmontools

- name: poll smartmontools only once per day
  # we want this so SAS disks are allowed to spin down (smartmontools
  # only ignores spundown ATA disks)
  # FIXME: this might be negated by munin's regular polling of smart
  lineinfile:
    dest: "/etc/default/smartmontools"
    regexp: '^(smartd_opts=.*)'
    line: 'smartd_opts="--interval=86400"'
  become: true
  notify: restart smartmontools
  when: smartmontools.stat.exists

- name: setup systemd overrides
  copy:
    src: "etc_systemd/system/{{ item }}.d/override.conf"
    dest: "/etc/systemd/system/{{ item }}.d/"
  with_items: "{{ systemd_overrides }}"
  become: true
  notify: restart systemd overrides

# FIXME: should set up postfix for !host_is_mailserver

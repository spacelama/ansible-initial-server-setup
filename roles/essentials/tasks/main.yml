---
- name: Configure tzdata
  block:
    - name: Configure timezone country
      debconf:
        name: tzdata
        question: tzdata/Areas
        value: "Australia"
        vtype: select
      become: true
      notify: Reconfigure tzdata

    - name: Configure timezone city
      debconf:
        name: tzdata
        question: tzdata/Zones/Australia
        value: "Melbourne"
        vtype: select
      become: true
      notify: Reconfigure tzdata
  always:
    - name: Make sure all handlers run
      meta: flush_handlers

  # ideally want to disable other fs level forms of trim because TRIM
  # is a non-queued SCSI command.  Keep lvm though because want
  # immediate response to something done manually, rarely
  # WARNING: on ZFS you also need to set org.debian:periodic-trim on each zpool!
- name: Ensure fstrim timer runs
  service:
    name: fstrim.timer
    state: started
    enabled: yes
  become: true
  when: host_is_container is not defined
  ignore_errors: true  # fails when not in systemd, or still in the
                       # installation environment, etc

- name: set discards in lvm.conf
  lineinfile:
    dest: "/etc/lvm/lvm.conf"
    regexp: '^\s*issue_discards = 0'
    line: '	issue_discards = 1'
    insertafter: 'issue_discards = 0'  # which is commented out if
                                       # above regexp didn't match
  become: true
  when: "'lvm2' in ansible_facts.packages"

  #ntpsec removed in favour of chrony finally, because it stops
  #network coming up on pve 8 (BTW, if ever go back to NTP, ntp.conf
  #manpage says tinker settings should be at top of conf file before
  #everything else, not at bottom where I had them originally)

- name: Remove (and purge) erroneous packages
  apt:
    name: ['locales-all', 'tuned', 'tuned-utils', 'tuned-utils-systemtap', 'hddtemp', 'bootlogd', 'ntp', 'ntpdate', 'ntpsec', 'ntpsec-ntpdate', 'ntpsec-ntpdig']
    state: absent
    purge: true
  become: true

- name: Remove once-installed-but-annoying packages
  apt:
    name: ['apt-listdifferences']
    state: absent
  become: true

  # we update the cache, acknowledging that we might still have repos
  # in there we don't want, that might fail, like enterprise proxmox
  # repos (and we ignore the failures).  Subsequent apt calls will
  # hopefully not want to refresh the cache
- name: Update APT Package Manager
  apt:
    update_cache: yes
  become: true
  when: quick is not defined
  ignore_errors: true

- name: Set plocate group
  group:
    name: "plocate"
    gid: 172
    state: present
  become: true

- name: Install essential packages (all)
  apt:
    name: ['rsyslog', 'needrestart', 'rsync', 'sysstat', 'bsd-mailx', 'procmail', 'colordiff', 'net-tools', 'ccze'] # procmail for lockfile, ccze for cron.daily get_conf
    autoremove: no
    state: present
  become: true

- name: Install essential packages that might not be available (all)
  apt:
    name: ['plocate']
    autoremove: no
    state: present
  become: true
  ignore_errors: true # plocate isn't available on buster, which still
                      # makes up a couple of our VMs

# caching name server etc per https://wiki.debian.org/NetworkConfiguration
- name: setup systemd-resolved for caching nameserver
  block:
  - name: Install systemd-resolved
    apt:
      name: ['libnss-resolve', 'systemd-resolved']
      autoremove: no
      state: present
    become: true

  - name: install blank /etc/network/interfaces
    copy:
      src: etc_network_interfaces.network-manager
      dest: /etc/network/interfaces
    become: true
    notify: restart network-manager

  - name: Install network-manager
    apt:
      name: ['network-manager']
      autoremove: no
      state: present
    become: true
    notify: restart network-manager

  - name: disable llmnr so don't get timeouts on NXDOMAIN lookups of local domain
    lineinfile:
      dest: "/etc/systemd/resolved.conf"
      regexp: '^LLMNR='
      line: 'LLMNR=no'
      insertafter: 'LLMNR=yes'  # which is commented out if
                                # above regexp didn't match
    become: true
    notify: restart systemd-resolved

  # https://stackoverflow.com/questions/74312082/how-do-i-make-ansible-builtin-lineinfile-task-indempotent
  # we want to order the nsswitch.conf host: entries per
  # https://www.freedesktop.org/software/systemd/man/latest/nss-resolve.html

  # Prepend the items we know we care about, first in the list.  First
  # detect whether we have the correct order already
  - name: "detect whether hosts: line in /etc/nsswitch.conf"
    lineinfile:
      dest: "/etc/nsswitch.conf"
      # negative lookup - if the line starts with our desired match,
      # then keep the line as is, otherwise append our desired match
      # (and we'll clear up duplicates later)
      # FIXME: not all machines will have mymachines (for docker containers - in fact only dirac has it)
      regexp: '^hosts: *mymachines myhostname resolve \[!UNAVAIL=return\] files dns.*'
      state: absent
    check_mode: true
    changed_when: false
    register: nsswitch_hosts
    become: true

  # Do the actual prepending
  - name: "try to reorder hosts: line in /etc/nsswitch.conf"
    lineinfile:
      dest: "/etc/nsswitch.conf"
      # negative lookup - if the line starts with our desired match,
      # then keep the line as is, otherwise append our desired match
      # (and we'll clear up duplicates later)
      regexp: '^hosts: *(.*)'
      line: 'hosts:          mymachines myhostname resolve [!UNAVAIL=return] files dns \1'
      backrefs: true
    become: true
    when: not nsswitch_hosts.found
    notify: restart systemd-resolved

  # Go back and remove the things that occur later, that were already
  # added at the front
  - name: "remove duplicates from hosts: line in /etc/nsswitch.conf"
    lineinfile:
      dest: "/etc/nsswitch.conf"
      # can't use '\b' after {{ item }}, because we want to be able to
      # detect nonword characters such as when ending with "resolve
      # [!UNAVAIL=return]".  Safe to use before though.
      regexp: "^hosts:(  *)(.*\\b{{ item }})( .*)? {{ item }}(.*)"
      line: 'hosts:\1\2\3\4'
      backrefs: yes
    with_items:
      - 'mymachines'
      - 'myhostname'
      - 'resolve \[!UNAVAIL=return\]'
      - 'files'
      - 'dns'
    become: true
    notify: restart systemd-resolved

  - name: enable systemd-resolved
    service:
      name: systemd-resolved
      enabled: yes
      state: started
    become: true

  - name: setup systemd-resolv.conf link
    file:
      src: ../run/systemd/resolve/stub-resolv.conf
      dest: /etc/resolv.conf
      state: link
      force: true
    become: true
    notify: restart systemd-resolved

  when: (deb_release | default('bullseye') != 'buster') and
        (host_is_using_systemd_resolver is defined)

# dnsmasq as a caching name server per https://wiki.debian.org/dnsmasq#Local_Caching_using_NetworkManager
- name: setup dnsmasq for caching nameserver
  block:
  - name: Install dnsmasq
    apt:
      name: ['dnsmasq']
      autoremove: no
      state: present
    become: true

  - name: install blank /etc/network/interfaces
    copy:
      src: etc_network_interfaces.network-manager
      dest: /etc/network/interfaces
    become: true
    notify: restart network-manager

  - name: Install network-manager
    apt:
      name: ['network-manager']
      autoremove: no
      state: present
      install_recommends: false
    become: true
    notify: restart network-manager

  - name: ensure dnsmasq doesn't enable itself (should be controlled through NetworkManager)
    service:
      name: dnsmasq
      state: stopped
      enabled: no
    become: true
    notify: restart network-manager
    # FIXME: except maybe nfsroot machines such as pi

  - name: ensure NetworkManager uses dnsmasq
    ini_file:
      path: /etc/NetworkManager/NetworkManager.conf
      section: main
      option: dns
      value: dnsmasq
    become: true
    notify: restart network-manager

  - name: Purge systemd-resolved
    apt:
      name: ['libnss-resolve', 'systemd-resolved']
      autoremove: no
      state: absent
      purge: true
    become: true
    notify: restart network-manager

  when: (deb_release | default('bullseye') != 'buster') and
        (host_is_pve_server is not defined) and
        (host_is_not_using_dnsmasq_cache is not defined)

- name: Configure locales
  block:
    - name: List of locales
      debconf:
        name: locales
        question: locales/locales_to_be_generated
        value: "en_AU.UTF-8 UTF-8, en_AU ISO-8859-1, en_DK ISO-8859-1, en_DK.ISO-8859-15 ISO-8859-15, en_DK.UTF-8 UTF-8, en_GB ISO-8859-1, en_GB.ISO-8859-15 ISO-8859-15, en_GB.UTF-8 UTF-8"
        vtype: multiselect
      become: true
      notify: Reconfigure locales

    - name: Configure default locale
      debconf:
        name: locales
        question: locales/default_environment_locale
        value: "en_AU.UTF-8"
        vtype: select
      become: true
      notify: Reconfigure locales
  always:
    - name: Make sure all handlers run
      meta: flush_handlers

- name: Install essential packages (not container)
  apt:
    name: ['git', 'htop', 'iotop', 'smem', 'ethtool', 'iperf3', 'aptitude', 'dlocate', 'vim', 'nicstat', 'lshw', 'parted', 'sdparm', 'chrony', 'ifstat', 'iftop', 'apt-listchanges', 'apt-show-versions', 'etckeeper', 'apt-listbugs', 'apt-listbugs', 'rlwrap', 'strace', 'make', 'keychain', 'libstring-shellquote-perl', 'dmidecode', 'expect', 'initscripts', 'direnv', 'rkhunter', 'dstat', 'bc'] # expect for unbuffer, initscripts for bootlogs, pcp for `pcp dstat`, but that results in pmlogger cronjobs that spin up disks on fs, bc for checkntp
    # atop
    autoremove: no
    state: present
    install_recommends: no
  become: true
  when: host_is_container is not defined

- name: Ensure chrony starts on a fresh reboot
  service:
    name: chrony
    state: started
    enabled: yes
  become: true
  when: host_is_container is not defined

- name: Remove previously essential but no longer current packages
  apt:
    name: ['uswsusp']
    autoremove: no
    state: absent
  become: true

- name: Install intel microcode
  apt:
    name: ['intel-microcode']
    autoremove: no
    state: present
  become: true
  # repos might not be set up correctly yet if still in check_mode, so
  # these packages might not yet be available
  when: host_is_intel is defined and not ansible_check_mode

- name: Install amd microcode
  apt:
    name: ['amd64-microcode']
    autoremove: no
    state: present
  become: true
  # repos might not be set up correctly yet if still in check_mode, so
  # these packages might not yet be available
  when: host_is_amd is defined and not ansible_check_mode

- name: Remove intel and amd microcode
  apt:
    name: ['amd64-microcode', 'intel-microcode']
    autoremove: no
    state: absent
  become: true
  when: host_is_intel is not defined and host_is_amd is not defined

  # FIXME: actually want to disable periodic updates, but need to find out how it's done on vanilla debian first.  Expecting APT::Periodic::Unattended-Upgrade in /etc/apt/apt.conf.d/ somewhere
#- name: Enable unattended upgrades
#  copy:
#    src: apt/10periodic
#    dest: /etc/apt/apt.conf.d/10periodic
#    owner: root
#    group: root
#    mode: 0644

- name: setup apt listchanges news
  lineinfile:
    dest: /etc/apt/listchanges.conf
    backrefs: yes
    regexp: '^(which=news)'
    line: '#\1\nwhich=both'
    state: present
  become: true
  when: host_is_container is not defined

- name: setup apt listchanges confirm
  lineinfile:
    dest: /etc/apt/listchanges.conf
    regexp: '^confirm='
    line: 'confirm=false'
    state: present
  become: true
  when: host_is_container is not defined

- name: "listbugs, but don't ask questions"
  lineinfile:
    dest: /etc/apt/apt.conf.d/10apt-listbugs
    regexp: '^.*DPkg::Pre-Install-Pkgs'
    line: '// DPkg::Pre-Install-Pkgs {"/usr/sbin/apt-listbugs apt";};'
    state: present
  become: true
  # listbugs might not be installed yet if still in check_mode, so
  # don't run anything relying on the conffile being there
  when: host_is_container is not defined and not ansible_check_mode

- name: stop restricting dmesg pointlessly
  copy:
    dest: /etc/sysctl.d/10-local.conf
    content: "kernel.dmesg_restrict = 0\n"
    owner: root
    group: root
    mode: 0644
  become: true
  notify: restart sysctl

- name: stop restricting sysrq
  copy:
    dest: /etc/sysctl.d/99-sysrq.conf
    content: "kernel.sysrq=1\n"
    owner: root
    group: root
    mode: 0644
  become: true
  notify: restart sysctl

- name: Set /etc/default/keyboard
  lineinfile:
    dest: /etc/default/keyboard
    line: "{{ item.key }}=\"{{ item.value }}\""
    regexp: "^{{ item.key }}="
    state: present
  become: true
  with_items:
    - { key: "XKBMODEL", value: "{{ XKBMODEL | default('pc104') }}" }
    - { key: "XKBLAYOUT", value: "{{ XKBLAYOUT | default('us') }}" }
    - { key: "XKBVARIANT", value: "{{ XKBVARIANT | default('') }}" }
    - { key: "XKBOPTIONS", value: "{{ XKBOPTIONS | default('ctrl:nocaps,terminate:ctrl_alt_bksp,compose:rwin') }}" }
  when: host_is_container is not defined

- name: install cron.daily.get_conf_info custom host helpers
  copy:
    src: "{{ item }}"
    dest: "{{ item | regex_replace('.*get_conf_info.' + hostname | default(inventory_hostname), '/usr/local/bin/get_conf_info') }}"
    owner: root
    group: root
    mode: 0755
  become: true
  with_fileglob:
    - "cron/cron.daily_get_conf_info.{{ hostname | default(inventory_hostname) }}*"

- name: install cron.daily switch password conf file if defined for this host
  copy:
    content: "{{ switch_pass }}"
    dest: /usr/local/etc/get_conf_info.switch.pass
    owner: root
    group: root
    mode: 0600
  become: true
  when: switch_pass is defined

- name: install cron.daily.get_conf_info
  file:
    src: /usr/local/bin/get_conf_info
    dest: /etc/cron.daily/get_conf_info
    state: link
    force: yes
  become: true

- name: install cron.daily.backuppc_check_backups
  file:
    src: /usr/local/bin/backuppc_check_backups
    dest: /etc/cron.daily/backuppc_check_backups
    state: link
    force: yes
  become: true

# https://forum.proxmox.com/threads/oom-kill-process-inside-lxc-memory-cgroup-out-of-memory.65106/
- name: ensure /var/log/journal persistent journal exists
  file:
    dest: /var/log/journal
    state: directory
  become: true

- name: Unscrew systemd login defaults - handlepowerkey
  lineinfile:
    dest: /etc/systemd/logind.conf
    line: HandlePowerKey=suspend
    regexp: ^HandlePowerKey=
    state: present
  become: true
  when: "'systemd' in ansible_facts.packages"
  notify: restart systemd-logind

  # we want desktops to be able to pass ctrl-alt-del through to
  # servers when on remote displays, and not accidentally trigger on
  # this machine if a desktop, where we have access to power buttons,
  # etc
- name: "set ctrl-alt-delete {{ host_is_desktop is not defined }} (desktop=off, server=on)"
  systemd:
    name: ctrl-alt-del.target
    masked: "{{ host_is_desktop is defined }}"
  become: true

- name: Unscrew systemd login defaults - kill user processes
  lineinfile:
    dest: /etc/systemd/logind.conf
    line: KillUserProcesses=no
    regexp: ^KillUserProcesses=
    state: present
  become: true
  when: "'systemd' in ansible_facts.packages"
  notify: restart systemd-logind

- name: Unscrew other systemd - unmask bootlog
  systemd:
    name: "{{ item }}"
    masked: false
  become: true
  with_items:
#    - stop-bootlogd
#    - stop-bootlogd-single
    - bootlogs # reenable /var/log/dmesg
#    - bootlogd
  when: host_is_container is not defined

- name: fix up utterly braindead config file defaults
  include_tasks: "{{ playbook_dir }}/roles/common/tasks/fixup_user_conf_files.yml"
  loop_control:
    loop_var: user
  with_items: "{{ fixup_user_conf_files.users }}"

- name: "Remove undesired flags and whitespace from grub config"
  include_tasks: "{{ playbook_dir }}/roles/common/tasks/remove_boot_flag.yml"
  loop_control:
    loop_var: flag
  with_items: { quiet, "   *" }   #for the sake of
                                  #/etc/kernel/cmdline, which doesn't
                                  #have the individual files of
                                  #/etc/default/boot.d/
  when: host_is_container is not defined and host_is_pi is not defined

- name: fix defaults in grub config
  lineinfile:
    dest: "/etc/default/grub"
    line: "{{ item }}"
  become: true
  with_items:
    - "#debian bug #717586"
    - "#Is it 'info grub'->Configuration->Simple Configuration:"
    - "GRUB_DISABLE_SUBMENU=y"
  notify: "Regenerate boot config"
  when: host_is_container is not defined and host_is_pi is not defined

- name: poll smartmontools only once per day
  # we want this so SAS disks are allowed to spin down (smartmontools
  # only ignores spundown ATA disks)
  # FIXME: this might be negated by munin's regular polling of smart
  lineinfile:
    dest: "/etc/default/smartmontools"
    regexp: '^(smartd_opts=.*)'
    line: 'smartd_opts="--interval=604800"'
  become: true
  when: "'smartmontools' in ansible_facts.packages"
  notify: restart smartmontools

- name: remove stale systemd overrides
  file:
    path: "/etc/systemd/system/{{ item }}.d/"
    state: absent
  with_items: "{{ remove_systemd_overrides }}"
  become: true
  notify: restart systemd overrides

- name: setup systemd overrides
  copy:
    src: "etc_systemd/system/{{ item }}.d/override.conf"
    dest: "/etc/systemd/system/{{ item }}.d/"
  with_items: "{{ systemd_overrides }}"
  become: true
  notify: restart systemd overrides

- name: set distribution in debsecan
  lineinfile:
    dest: "/etc/default/debsecan"
    regexp: '^(SUITE=.*)'
    line: 'SUITE={{deb_release | default("bullseye")}}'
  become: true
  when: "'debsecan' in ansible_facts.packages"

- name: set daily reporting false in debsecan
  lineinfile:
    dest: "/etc/default/debsecan"
    regexp: '^(REPORT=.*)'
    line: 'REPORT=false'
  become: true
  when: "'debsecan' in ansible_facts.packages"

- name: Synchronize (rsync) and delete files in /etc/bash-git-prompt
  ansible.posix.synchronize:
    src: etc_bash-git-prompt/
    dest: /etc/bash-git-prompt/
    delete: yes
    recursive: yes
    rsync_opts:
      - "--exclude=.git"
      - "--delete-excluded"
  become: true

- name: install ceph and autofs packages
  apt:
    name: [ 'ceph-common', 'autofs' ]
    autoremove: no
    state: present
    install_recommends: no
  become: true
  when: mount_ceph_clients is defined

- name: install host specific packages
  apt:
    # list of packages
    name: "{{ packages_to_install }}"
    # atop
    autoremove: no
    state: present
#    install_recommends: yes
    install_recommends: no
  become: true
  when: packages_to_install is defined

- name: Install zram-generator
  apt:
    name: ['systemd-zram-generator' ]
    autoremove: no
    state: present
    install_recommends: no
  become: true
  when: (deb_release | default('bullseye') == 'bookworm') and ((host_is_desktop is defined) or (host_is_pi is defined))

- name: "Ensure custom modules in /etc/modules"
  lineinfile:
    dest: /etc/modules
    line: "{{ item }}"
    state: present
  become: true
  notify: "Update initramfs config"
  loop: "{{ modprobe | default([]) }}"

# FIXME: distribute ssh_known_hosts
# https://stackoverflow.com/questions/59832034/how-to-include-all-host-keys-from-all-hosts-in-group

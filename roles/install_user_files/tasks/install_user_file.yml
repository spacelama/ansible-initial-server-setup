---
# allow the caller to supply {{ lines }} to ensure exist in the output
# file, or a {{ source }} file or a {{ source.j2 }} template

# ensure the destination directory exists so we can add a line to it
# if necessary, but don't go converting any symlinks to dirs
# - name: Take file_or_template_recurse from caller if set
#   set_fact:
#     file_or_template: "{{ file_or_template_recurse }}"
#     file_or_template_recurse: ''
#   when: "file_or_template_recurse | default('') != ''"
#- name: Take file_or_template_recurse from caller if set
#  set_fact:
#    file_or_template[name]: "{{ file_or_template }}"
#  when: "file_or_template.name is not defined"

- name: "Does   {{ ( '~' ~ user ~ '/' ~ file_or_template.name ) | dirname }} exist?"
  stat:
    path:      "{{ ( '~' ~ user ~ '/' ~ file_or_template.name ) | dirname }}"
  become: true
  register: dirtest

- name: "Create {{ ( '~' ~ user ~ '/' ~ file_or_template.name ) | dirname }}/"
  file:
    path:      "{{ ( '~' ~ user ~ '/' ~ file_or_template.name ) | dirname }}"
    state: directory
    owner: "{{ user }}"
    group: "{{ user }}"
  become: true
  when: not dirtest.stat.exists

  # FIXME: the rest of these should be include_tasks too
- name: "fixup line in conf file: ~{{ user }}/{{ file_or_template.name }}"
  lineinfile:
    dest: "~{{ user }}/{{ file_or_template.name }}"
    owner: "{{ user }}"
    group: "{{ user }}"
    line: "{{ item }}"
    mode: "{{ file_or_template.mode | default(omit) }}"
    create: yes
  become: true
  become_user: "{{ user }}"
  with_items: "{{ file_or_template.lines }}"
  when: file_or_template.lines is defined

- include_tasks: install_user_directory.yml
  when: ( file_or_template.name is defined ) and
        ( file_or_template.source | default ( 'homes/' ~ file_or_template.name ) ) is regex(".*/$")

#- fail:
#    msg: "got here"

- name: "install user file: ~{{ user }}/{{ file_or_template.name }}"
  # default to homes/<name> if source: isn't provided
  copy:
    dest: "~{{ user }}/{{ file_or_template.name }}"
    owner: "{{ user }}"
    group: "{{ user }}"
    src: "{{ file_or_template.source | default( 'homes/' ~ file_or_template.name ) }}"
    mode: "{{ file_or_template.mode | default(omit) }}"
  become: true
  become_user: "{{ user }}"
  when: file_or_template.name is defined and
          ( file_or_template.source | default ( 'homes/' ~ file_or_template.name ) ) is not regex(".*.j2$") and
          ( file_or_template.source | default ( 'homes/' ~ file_or_template.name ) ) is not regex(".*/$")

- name: "install user file per template: ~{{ user }}/{{ file_or_template.name }} "
  # default to homes/<name> if source: isn't provided
  template:
    dest: "~{{ user }}/{{ file_or_template.name }}"
    owner: "{{ user }}"
    group: "{{ user }}"
    src: "{{ file_or_template.source | default( 'homes/' ~ file_or_template.name ) }}"
    mode: "{{ file_or_template.mode | default(omit) }}"
  become: true
  become_user: "{{ user }}"
  when: file_or_template.name is defined and
          ( file_or_template.source | default ( file_or_template.name ) ) is regex(".*.j2$")
          # can't also be directory

#- name: "ensure permissions are correct on {{ file_or_template.name }} for user {{ user }}"
#  when: file_or_template.mode is defined  # stop spurious messages about "changed" when the file is a symlink to common-files/
#  file:
#    dest: "~{{ user }}/{{ file_or_template.name }}"
#  become: true

---
# allow the caller to supply {{ lines }} to ensure exist in the output
# file, or a {{ source }} file or a {{ source.j2 }} template

# ensure the destination file exists so we can add a line to it if necessary
- name: "Does   {{ ( '~' ~ user ~ '/' ~ file_or_template.name ) | dirname }} exist?"
  stat:
    path:      "{{ ( '~' ~ user ~ '/' ~ file_or_template.name ) | dirname }}"
  become: true
  register: dirtest

- name: "Create {{ ( '~' ~ user ~ '/' ~ file_or_template.name ) | dirname }}/"
  file:
    path:      "{{ ( '~' ~ user ~ '/' ~ file_or_template.name ) | dirname }}"
    state: directory
    owner: "{{ user }}"
    group: "{{ user }}"
  become: true
  when: not dirtest.stat.exists

- name: "fixup line in conf file: ~{{ user }}/{{ file_or_template.name }}"
  lineinfile:
    dest: "~{{ user }}/{{ file_or_template.name }}"
    owner: "{{ user }}"
    group: "{{ user }}"
    line: "{{ item }}"
    mode: "{{ file_or_template.mode | default(omit) }}"
    create: yes
  become: true
  with_items: "{{ file_or_template.lines }}"
  when: file_or_template.lines is defined

- name: "install conf file under directory: ~{{ user }}/{{ file_or_template.name }}"
  include_tasks: install_user_file.yml   # recursively call ourselves, weeeee!
  loop_control:
    loop_var: file_or_template   # FIXME: results in warning "[WARNING]: TASK: essentials : fixup conf file under directory: ~{{ user }}/{{ file_or_template.name }}: The loop variable 'file_or_template' is already in use. You should set the `loop_var` value in the `loop_control` option for the task to something else to avoid variable collisions and unexpected behavior." but that's exactly what we're trying to do (but it seems we're not recursing with the new variable properly...)
  with_items: "{{ lookup('fileglob', ( ( file_or_template.source | default( 'homes/' ~ file_or_template.name ) ) ~ \"/*\" ), wantlist=True) }}"
  when: file_or_template.name is defined and
          ( file_or_template.source | default ( 'homes/' ~ file_or_template.name ) ) is directory

- name: "install conf file: ~{{ user }}/{{ file_or_template.name }}"
  # default to homes/<name> if source: isn't provided
  copy:
    dest: "~{{ user }}/{{ file_or_template.name }}"
    owner: "{{ user }}"
    group: "{{ user }}"
    src: "{{ file_or_template.source | default( 'homes/' ~ file_or_template.name ) }}"
    mode: "{{ file_or_template.mode | default(omit) }}"
  become: true
  when: file_or_template.name is defined and
          ( file_or_template.source | default ( 'homes/' ~ file_or_template.name ) ) is not regex(".*.j2$") and
          ( file_or_template.source | default ( 'homes/' ~ file_or_template.name ) ) is not directory

- name: "install conf file per template: ~{{ user }}/{{ file_or_template.name }} "
  # default to homes/<name> if source: isn't provided
  template:
    dest: "~{{ user }}/{{ file_or_template.name }}"
    owner: "{{ user }}"
    group: "{{ user }}"
    src: "{{ file_or_template.source | default( 'homes/' ~ file_or_template.name ) }}"
    mode: "{{ file_or_template.mode | default(omit) }}"
  become: true
  when: file_or_template.name is defined and
          ( file_or_template.source | default ( file_or_template.name ) ) is regex(".*.j2$")
          # can't also be directory

#- name: "ensure permissions are correct on {{ file_or_template.name }} for user {{ user }}"
#  when: file_or_template.mode is defined  # stop spurious messages about "changed" when the file is a symlink to common-files/
#  file:
#    dest: "~{{ user }}/{{ file_or_template.name }}"
#  become: true

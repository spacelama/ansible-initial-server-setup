---
# installs arrays of files

#- debug: msg="bashrc_files = {{ bashrc_files }}"
#- debug: msg="install_files = {{ install_files }}"
#- debug: msg="remove_files = {{ remove_files }}"


# FIXME: once we have files/ populated correctly, and when no more
# occurences of remove_files, this can go.  We'd likely be able to do
# away with "remove files not in list" because these could simply
# become directories in the source tree (with remove taken care of by
# eg files/tree.remove
- name: remove files not in list
  include_tasks: remove_list_files.yml
  loop: "{{ remove_files | default([]) }}"
  loop_control:
    loop_var: file_details
  when: file_details.when | default(omit)

- name: populate list of files
  include_tasks: "install_dir_file_or_template.yml"
  loop: "{{ ( install_files | default([]) ) + ( custom_files | default([]) ) }}"
  loop_control:
    loop_var: dir_file_or_template
  when:
    # ANDED: allow user to supply when and when_pkg_installed -
    - (dir_file_or_template.when | default(true))   # can't "omit" in a list, so since this is OR, default to true
    - (dir_file_or_template.when_pkg_installed is defined) |
       ternary(dir_file_or_template.when_pkg_installed | default("unmatchable-package-name") in ansible_facts.packages | default([]), true)

- name: Make sure all handlers run
  meta: flush_handlers

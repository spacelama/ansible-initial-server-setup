---
- name: install USB disk packages
  # assumes you've already setup pivot overlay:
  # https://openwrt.org/docs/guide-user/storage/usb-drives
  # https://openwrt.org/docs/guide-user/storage/usb-drives-quickstart
  # https://gist.github.com/shashishailaj/091a2cd5146c36604ecac9e70ce6d50a
  # For me, at creation time, it was just:
  # below opkg install then
  # mkfs.f2fs /dev/sda1
  # block detect | uci import fstab
  # uci set fstab.@mount[-1].enabled='1'
  # uci commit fstab
  # reboot
  # tar -C /overlay -cvf - . | tar -C /openwrt -xf -
  # reboot and rock gently back and forth
  #
  # This task then comes along first thing next upgrade time, and
  # makes sure the prerequisites are installed before rebooting and
  # trying the rest of the installation process.  NOT TESTED: is the
  # old cruft from the previous version taken care of?
  when: openwrt_heavy_installation == 'usb'
  opkg:
#    name: block-mount,e2fsprogs,kmod-usb-storage-uas,kmod-usb3,kmod-fs-ext4
    name: block-mount,kmod-usb-storage-uas,kmod-usb3,f2fs-tools,kmod-fs-f2fs
    state: present
    # FIXME: if changed, reboot and wait

- name: remove conflicting and/or obsolete packages
  # if want to go back to DAWN later, it is now better documented: https://github.com/berlin-open-wireless-lab/DAWN/blob/master/CONFIGURE.md
  # also, here: https://www.reddit.com/r/openwrt/comments/v26ybu/dawn_vs_usteer/
  opkg:
    name: luci-app-dawn,dawn,wpad-basic-mbedtls
    # wpad-basic-mbedtls conflicts with hostapd-mbedtls
    # https://forum.openwrt.org/t/why-return-to-mbed-tls/162957/4
    state: absent

- name: install compulsory packages
  opkg:
    name: bash,muninlite,rsync,fping
    state: present

- name: install router configuration
  when: type == 'router'
  block:
    - name: install router packages
      opkg:
        name: luci-app-sqm,avahi-dbus-daemon,adblock,luci-app-adblock,msmtp,ethtool,arp-scan,ifstat,bind-dig,darkstat,luci-app-nlbwmon,luci-app-statistics,vnstat2,vnstati2,luci-app-vnstat2,ip-bridge,bridge # ip-bridge is for `bridge vlan` command, bridge gives more complete control of brctl
        # instead of port mirroring, perhaps we can configure ecowitt mirroring of port 8000->homeassistant:4199 via port forwards ,port-mirroring
        # FIXME: kmod-wireguard?
        state: present


    - name: configure msmtp
      lineinfile:
        dest: /etc/msmtprc
        regexp: "^host "
        line: "host smtp.{{ domain }}"
    - lineinfile:
        dest: /etc/msmtprc
        regexp: "^port "
        line: "port 25"
    - lineinfile:
        dest: /etc/msmtprc
        regexp: "^tls "
        line: "tls off"
    - lineinfile:
        dest: /etc/msmtprc
        regexp: "^tls_starttls "
        line: "tls_starttls off"
    - lineinfile:
        dest: /etc/msmtprc
        regexp: "^from "
        line: "from %U@{{ inventory_hostname }}.{{ domain }}"

    - name: install router packages that were failing at one point
      opkg:
        # kmod-tcp-bbr was on b1300 prior to 21.02.1 upgrade - no idea how
        # it got there
        name: luci-app-banip
        state: present
      ignore_errors: true

    - name: setup avahi zeroconf DNS reflector for chromecast
      # roughly per
      # https://forum.openwrt.org/t/bridging-mdns-between-networks/113840/19
      # firewall is already configured, so just ensure /etc/config/ is
      # copied when migrating to new gateway next time
      #copy:
      #  src: etc_avahi_avahi-daemon.conf
      #  dest: /etc/avahi/avahi-daemon.conf
      lineinfile:
        dest: /etc/avahi/avahi-daemon.conf
        regexp: '^#*host-name='
        line: "host-name={{ inventory_hostname }}"
        insertafter: '^#host-name='
    - lineinfile:
        dest: /etc/avahi/avahi-daemon.conf
        regexp: '^#*domain-name='
        line: "domain-name={{ domain }}"
        insertafter: '^#domain-name='
    - lineinfile:
        dest: /etc/avahi/avahi-daemon.conf
        regexp: '^#*enable-dbus='
        line: 'enable-dbus=yes'
        insertafter: 'use-iff-running='
    - lineinfile:
        dest: /etc/avahi/avahi-daemon.conf
        regexp: '^#*allow-interfaces='
        line: "allow-interfaces={{ allow_avahi_zeroconf_interfaces }}"
        insertafter: 'enable-dbus='
    - lineinfile:
        dest: /etc/avahi/avahi-daemon.conf
        regexp: '^#*publish-dns-servers='
        line: "publish-dns-servers={{ avahi_zeroconf_public_dns_servers }}"
        insertafter: "^#publish-dns-servers="
    - lineinfile:
        dest: /etc/avahi/avahi-daemon.conf
        regexp: '^#*publish-resolv-conf-dns-servers'
        line: "publish-resolv-conf-dns-servers=yes"
        insertafter: '^#publish-resolv-conf-dns-servers='
    - lineinfile:
        dest: /etc/avahi/avahi-daemon.conf
        regexp: '^#*enable-reflector='
        line: 'enable-reflector=yes'
        insertafter: '^#enable-relfector='

    # https://www.reddit.com/r/openwrt/comments/wdkp8t/new_to_openwrt_active_connections_constantly/
    # monitor /proc/net/nf_conntrack
    # Bump RAM up on the VM to 512MB too
    - name: Ensure netfilter connection tracking suffices
      lineinfile:
        dest: /etc/sysctl.conf
        regexp: '^net.netfilter.nf_conntrack_max='
        line: 'net.netfilter.nf_conntrack_max=65535'
      notify: restart sysctl

    # https://github.com/jow-/nlbwmon/issues/30
    # https://github.com/jow-/nlbwmon/issues/43 points out some other net.core values that might be needed.
    # Looking for:
    # Jun 18 01:59:14 gateway nlbwmon[11880]: Netlink receive failure: Out of memory
    # Jun 18 01:59:14 gateway nlbwmon[11880]: Unable to dump conntrack: No buffer space available
    - name: Ensure rmem_max large enough for nlbwmon
      lineinfile:
        dest: /etc/sysctl.conf
        regexp: '^net.core.rmem_max='
        line: 'net.core.rmem_max=1048576'
      notify: restart sysctl

  # https://openwrt.org/docs/guide-user/network/wifi/usteer talks
  # about needing wpad full (wpad-wolfssl or wpad-openssl), but we
  # only actually need hostapd-mbedtls since we're not a client:
  # https://forum.openwrt.org/t/individual-per-passphrase-per-mac-wifi-vlans-using-wpa-psk-file-no-radius-required/161696/12
- name: install AP packages
  when: type == 'ap'
  opkg:
    name: usteer,luci-app-usteer,hostapd-mbedtls,hostapd-utils
    state: present

- name: install full packages
  when: openwrt_heavy_installation | default(true)
  opkg:
    name: luci-mod-dashboard,lldpd,luci-app-lldpd,tcpdump,strace,lsof,usbutils,ethtool,mii-tool,psmisc,procps-ng-ps,procps-ng-watch,procps-ng-vmstat,procps-ng-top,iftop,htop,btop,iperf3,less,diffutils,perl,perlbase-tie,perlbase-base,perlbase-getopt,ip-tiny,coreutils-stat # perlbase-tie for munin sensors_, perlbase-getopt and perlbase-base for colordiff, ip-tiny so we get at least `ip -c a` instead of busybox version, but other alternative we haven't needed yet is ip-full, coreutils-stat for stat for our shell script's use
    state: present

- name: install host specific packages
  when: packages_to_install is defined
  opkg:
    # comma separated, single variable
    name: "{{ packages_to_install }}"
    state: present

- name: install nut packages
  when: nut_install | default(false)
  opkg:
    name: luci-app-nut,nut,nut-upscmd,nut-upsc,nut-upslog,nut-server,nut-driver-blazer_usb,nut-driver-usbhid-ups,nut-upssched,nut-avahi-service,nut-upsrw,nut-web-cgi
    state: present

- name: install nut munin plugins
  when: nut_install | default(false)
  file:
    src: /root/bin/nutups_
    dest: "/etc/munin/plugins/nutups_powershield_{{ item }}"
    state: link
    force: yes
  with_items: [ charge,voltages,freq,current ]

- name: install temperature sensors munin plugin
  when: '"lm-sensors" in packages_to_install'
  file:
    src: /root/bin/sensors_
    dest: "/etc/munin/plugins/sensors_temp"
    state: link
    force: yes

- name: set root account passwd
  lineinfile:
    dest: /etc/passwd
    regexp: "^root:"
    line: "root:x:0:0:root:/root:/bin/bash"
- name: set root account shadow
  lineinfile:
    dest: /etc/shadow
    regexp: "^root:"
    line: "root:{{ rootshadow }}:18868:0:99999:7:::"
  no_log: true
- name: set rootsh account passwd
  lineinfile:
    dest: /etc/passwd
    regexp: "^rootsh:"
    line: "rootsh:x:0:0:root:/root:/bin/ash"
    insertafter: "^root:"
- name: set rootsh account shadow
  lineinfile:
    dest: /etc/shadow
    regexp: "^rootsh:"
    line: "rootsh:{{ rootshadow }}:18868:0:99999:7:::"
    insertafter: "^root:"
  no_log: true

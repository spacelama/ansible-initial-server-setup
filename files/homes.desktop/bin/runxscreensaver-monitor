#!/bin/bash

# monitors xscreensaver log to see whether it should restart it after
# a blacklist of programs (eg, firefox) try to inhibit it.

# My solution to Debian Bug#1009864 In firefox,
# https://bugzilla.mozilla.org/show_bug.cgi?id=1749187 fixed the issue
# (with mandatory configuration) for audio, but
# https://bugzilla.mozilla.org/show_bug.cgi?id=1885268 still open for
# visual.  Can apparently be worked around with:
# set:  dom.screenwakelock.enabled to false
#       media.video-wakelock to false
#       permissions.default.screen-wake-lock to 0
# But you fix that, and chromium releases an update that breaks it
# again for that too.  So just fight back with a screensaver
# restarter service.

blacklist=(firefox-esr chromium)

log_in=/tmp/xscreensaver.$DISPLAY.log
log_out=/tmp/xscreensaver-monitor.$DISPLAY.log

function notify() {
    echo "$( colorize -n bright green runxscreensaver-monitor: $(date): ) $( colorize -n dark green "$@")"
}

rotate_logfile() {
    # append current contents to .old and create the new logfile
    # afresh
    cat "$log_out" >> "$log_out.old"
    notify "rotating: $log_out" > "$log_out"

    # if .old is big enough yet, rotate it too
    maxsize=1000000
    filesize=$(stat -c%s "$log_out.old")

    if (( filesize > maxsize )); then
        notify "rotating: $log_out.old"
        > "$log_out.old"
        notify "rotating: $log_out.old" >> "$log_out.old"
    fi
}

restart_xscreensaver() {
    rotate_logfile

    notify "Found logfile line indicating we need to trigger restart of screensaver"

    notify " - Will restart xscreensaver"
    systemctl --user reset-failed runxscreensaver.service # manual resets count towards the StartLimitIntervalSec start-limit-hit failure-prohibit-start logic, so reset the reset (since we don't want to explicitly remove the default failure-start-loop logic, but also not contribute to it going over the limit)
    systemctl --user restart runxscreensaver.service
    echo " ***" "$@"
}

export PATH=$PATH:$HOME/bin

exec >> $log_out 2>&1
rotate_logfile

tail -n 1 -F $log_in | grep --line-buffered -e "inhibited by" | while read inhibited_line ; do
    for blacklisted in "${blacklist[@]}" ; do
        if [[ "$inhibited_line" == *"$blacklisted"* ]] ; then
            # we only kill it here.  We detect next loop around
            # that it died via SIG message, which restarts it then
            restart_xscreensaver "$inhibited_line"
        fi
    done
done

#!/bin/bash
# paswitch 2011-02-02 by Ng Oon-Ee <ngoonee.talk@gmail.com>
# I can't remember where I found this script, can't locate the original author.
# Please inform me if you know, so that I can give proper attribution.
# CHANGES: Added auto-move all inputs to new default sound card.
# WAS: Pulse Audio Sound Card Switcher v1.0 2010-01-13
#   Switches between soundcards when run. All streams are moved to the new default sound-card.

if [ "$1" = --all ] ; then
    blacklist="$HOME/.paswitchblacklist-hard"
else
    blacklist="$HOME/.paswitchblacklist-hard $HOME/.paswitchblacklist-soft"
fi

function verboserun () {
    echo "$*"
    if [ -z "$noop" ] ; then
        eval "$*" || exit 2   #eval because comments are enclosed in ' " '
    fi
}

function setdefaultsink() {
    verboserun pacmd "set-default-sink $@" # switch default sound card to next 
# $inputs: A list of currently playing inputs
    inputs=
    while read header index ; do
        if [ "$header" != 'index:' ] ; then
            continue
        fi

        read header1 driver
        [ "$header1" != "driver:" ] && continue
#        [[ "$driver" == *"module-equalizer-sink.c"* ]] && continue

        read header1 flags
        [ "$header1" != "flags:" ] && continue
        [ "$flags" = "DONT_MOVE" ] && continue

        read header1 state
        [ "$header1" != "state:" ] && continue
        [ "$state" != "RUNNING" ] && continue
        
        inputs="$inputs $index"
    done < <( pacmd list-sink-inputs | grep -e driver: -e index: -e flags: -e state: )

    for INPUT in $inputs; do # Move all current inputs to the new default sound card
        verboserun pacmd move-sink-input $INPUT "$@"
    done
}

# $totalsc: Number of sound cards available
totalsc=$(pacmd "list-sinks" | grep index: | wc -l) # total of sound cards: $totalsc
if [ $totalsc -le 1 ]; then # Check whether there are actually multiple cards available
    gxmessage -print -nearmouse -timeout 5 "Nothing to switch, system only has one sound card." &
    exit
fi

#equaliser_master_device=$(pacmd list-sinks | sed -n 's/.*device.master_device = "\(.*\)"$/\1/p' )
equaliser_master_device=$(pacmd list-sink-inputs | grep -e driver: -e sink | grep -A1 module-equalizer-sink.c | sed -n 's/.*sink:.*<\(.*\)>$/\1/p' )

blacklist=$(
    for blacklist in $blacklist ; do
        if [ -e "$blacklist" ] ; then
            sed 's/ *#.*// ; /^$/d' "$blacklist"
        fi
    done
)

equaliser=
cards=
scindex=
# $scindex: The Pulseaudio index of the current default sound card
# $cards: A list of card Pulseaudio indexes
while read header index ; do
    if [ "$header" != 'index:' -a "$header" != '*index:' ] ; then
        continue
    fi
    read header1 name
    [ "$header1" != "name:" ] && continue
    read header1 header2 descr
    [ "$header1" != "device.description" ] && continue
    
    name="${name#\<}"
    name="${name%\>}"
    descr="${descr#\"}"
    descr="${descr%\"}"

    echo "name: $name"
    if [ "$header" = "*index:" -a -z "$scindex" ] && [[ "$name" != *.equalizer ]] ; then
        echo "Setting non equaliser scindex to $index"
        scindex=$index
    fi
    if [ "$name" = "$equaliser_master_device" ] ; then
        echo "Setting equaliser scindex to $index"
        scindex=$index
    fi

    while read b ; do
        if [[ "$descr" = "FFT based equalizer on"* ]] ; then
            equaliser=$index
            echo "$index: found equaliser on: $descr"
            continue 2
        fi
        
        if [[ "$descr" = $b ]] ; then
            echo "ignoring $index: $descr"
            continue 2
        fi
    done < <( echo "$blacklist" )
    echo "$index: $descr"
    cards="$cards $index"
done < <( pacmd list-sinks | sed 's|* |*|' | grep -e name: -e index: -e device.description )
           
PICKNEXTCARD=1 # Is true when the previous card is default
count=0 # count of number of iterations
for CARD in $cards; do
    if [ $PICKNEXTCARD == 1 ]; then
# $nextsc: The pulseaudio index of the next sound card (to be switched to)
        nextsc=$CARD
        PICKNEXTCARD=0
# $nextind: The numerical index (1 to totalsc) of the next card
        nextind=$count
    fi
    if [ $CARD == $scindex ]; then # Choose the next card as default
        PICKNEXTCARD=1
    fi
    count=$((count+1))
done

setdefaultsink $nextsc

# $nextscdec: The device.description of the new default sound card
while read header index ; do
    [ "$header" != index: ] && continue
    read header1 header2 descr
    [ "$header1" != "device.description" ] && continue
    
    descr="${descr#\"}"
    descr="${descr%\"}"
    
    if [ $index = $nextsc ] ; then
        echo "found: $descr"
        nextscdesc="$descr"
    fi
done < <( pacmd list-sinks | sed 's|*||' | grep -e index: -e device.description )

setdefaultsink $equaliser

            
#notify-send "Default sound-card changed to $nextscdesc"

kill `pidof paswitchmessage` >& /dev/null
( exec -a "paswitchmessage" gxmessage -print -nearmouse -timeout 10 "Default sound card is now $nextscdesc" & )


# Below text was from original author and remains unaltered
# CC BY - creative commons
# Thanks God for help :) and guys lhunath, geirha, Tramp and others from irc #bash on freenode.net

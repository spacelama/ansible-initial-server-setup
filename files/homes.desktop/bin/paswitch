#!/bin/bash
# paswitch 2011-02-02 by Ng Oon-Ee <ngoonee.talk@gmail.com>
# I can't remember where I found this script, can't locate the original author.
# Please inform me if you know, so that I can give proper attribution.
# CHANGES: Added auto-move all inputs to new default sound card.
# WAS: Pulse Audio Sound Card Switcher v1.0 2010-01-13
#   Switches between soundcards when run. All streams are moved to the new default sound-card.

# sourced by Tim Connors circa 2015 from
# https://askubuntu.com/questions/71863/how-to-change-pulseaudio-sink-with-pacmd-set-default-sink-during-playback
# with more mods and port to pipewire in 2024


debug=
if [ "$1" = --debug ] ; then
    debug=true
fi
# get list with:
# pactl list sinks | grep "^\s*Desc"
if [ "$1" = --all ] ; then
    blacklist="$HOME/.paswitchblacklist-hard"
else
    blacklist="$HOME/.paswitchblacklist-hard $HOME/.paswitchblacklist-soft"
fi

log() {
    echo "$@"
}
logf() {
    printf "$@"
}

# if a TTY output or we've been asked, use colour
use_colour() {
    green=$(TERM=xterm tput setf 2)
    red=$(TERM=xterm tput setf 4)
    yellow=$(TERM=xterm tput setf 6)
    normal=$(TERM=xterm tput sgr0)
    bold=$(TERM=xterm tput bold)
    color=--color=always
}

# Colourise single line
echocolour() {
    while : ; do
        colour="$1"
        case "$colour" in
            green)
                log -n "$green"
                ;;
            red)
                log -n "$red"
                ;;
            yellow)
                log -n "$yellow"
                ;;
            normal)
                log -n "$normal"
                ;;
            bold)
                log -n "$bold"
                ;;
            *)
                break
                ;;
        esac
        shift
    done
    log "$@${normal}"
}

function verboserun () {
    declare -a cmd=()
    for arg in "$@" ; do
        cmd+=($(printf "%q" "$arg")) # escape all args (could also use /usr/bin/shell-quote)
    done
    echocolour green "${cmd[*]}"
    commands+=("${cmd[*]}")
    if [ -z "$noop" ] ; then
        "$@"
    fi
}

function get_default_sink() {
    pactl get-default-sink
}

function get_current_sinks() {
    equaliser=
    cards=
    scindex=
    # $scindex: The Pulseaudio index of the current default sound card
    # $cards: A list of card Pulseaudio indexes
    while read header index ; do
        if [ "$header" != 'Sink' ] ; then
            continue
        fi
        read header1 name
        [ "$header1" != "Name:" ] && continue
        read header1 header2 descr
        [ "$header1" != "device.description" ] && continue

        index="${index#\#}"
        name="${name#\<}"
        name="${name%\>}"
        descr="${descr#\"}"
        descr="${descr%\"}"

        echo "name: $name"
        if [ "$name" = "$default_sink_name" -a -z "$scindex" ] && [[ "$name" != *.equalizer ]] ; then
            echo "Setting non equaliser scindex to $index"
            scindex=$index
        fi
        if [ "$name" = "$equaliser_master_device" ] ; then
            echo "Setting equaliser scindex to $index"
            scindex=$index
        fi

        while read blocked ; do
            if [[ "$descr" = "FFT based equalizer on "* ]] &&
                   [[ "$descr" != "FFT based equalizer on "*" on "*"@"* ]] ; then
                equaliser=$index
                echo "$index: found equaliser on: $descr"
                continue 2
            fi

            if [[ "$descr" == $blocked ]] ; then
                echo "ignoring $index: $descr"
                continue 2
            fi
        done < <( echo "$blacklist" )
        echo "$index: $descr"
        cards="$cards $index"
    done < <( pactl list sinks | grep -i -e '^Sink' -e 'name:' -e 'device.description' )
}

function get_next_sink() {
    PICKNEXTCARD=1 # Is true when the previous card is default
    count=0 # count of number of iterations
    for CARD in $cards; do
        # In case the current card is the last card, start off assuming
        # the next card is looped back to the first first card - we can
        # adjust that later when we discover that the current card is not
        # in fact the last card
        if [ $PICKNEXTCARD == 1 ]; then
            # $nextsc: The pulseaudio index of the next sound card (to be switched to)
            nextsc=$CARD
            PICKNEXTCARD=0
            # $nextind: The numerical index (1 to totalsc) of the next card
            nextind=$count
        fi
        if [ $CARD == $scindex ]; then # Choose the next card as default
            PICKNEXTCARD=1
        fi
        count=$((count+1))
    done
}

function set_default_sink() {
    verboserun pactl set-default-sink "$@" # switch default sound card to next
}

function set_all_current_active_sinks() {
    # $inputs: A list of currently playing inputs
    inputs=
    while read header_sink header_input index ; do
        if [ "$header_sink $header_input" != 'Sink Input' ] ; then
            continue
        fi
        index="${index#\#}"

        # FIXME: we don't currently use any equalizer module in
        # pipewire, so no way to test what's needed now:
        # FIXME:        read header1 driver
        # FIXME:        [ "$header1" != "driver:" ] && continue
        # FIXME:#        [[ "$driver" == *"module-equalizer-sink.c"* ]] && continue

        # FIXME: Suspect DONT_MOVE was added as part of not erroring
        # during when equalizer was configured.  Can't now test on
        # pipewire
        # FIXME:        read header1 flags
        # FIXME:        [ "$header1" != "flags:" ] && continue
        # FIXME:        [ "$flags" = "DONT_MOVE" ] && continue

        # FIXME: cvs history doesn't tell me what we were mitigating
        # here.  Maybe I only wanted sound to migrate if it was
        # actually active?  If paused, wanted it to resume on the same
        # device it was playing on before we switched?  Problem is, I
        # don't seem to have access to that in pipewire
        # FIXME:        read header1 state
        # FIXME:        [ "$header1" != "state:" ] && continue
        # FIXME:        [ "$state" != "RUNNING" ] && continue

        read header1 equals application_name
        # echo header1=$header1-$equals-$pplication_name
        [ "$header1 $equals" != "application.name =" ] && continue
        # ignore this source if the application is called
        # "*headphone*" - the user has explicitly set the sink and
        # doesn't want it changed
        [[ "$application_name" == *headphone* ]] && continue
        # echo application_name=$application_name

        inputs="$inputs $index"
    done < <( pactl list sink-inputs | grep -e '^Sink Input' -e 'application.name = ' ) # -e State: -e Flags: 
    # FIXME: sink, card, state can be obtained from `pactl list sources short`, flags from `pactl list sinks | grep -i flag`
    # FLAG, STATE from `pactl list sinks | grep -i -e flag -e state`
    # sink-inputs gets name but not state, flags; sinks gets flag, state but not name;
    #   we need the name to be able to skip headphones!

    for INPUT in $inputs; do # Move all current inputs to the new default sound card
        verboserun pactl move-sink-input $INPUT "$@"
    done
}

function calculate_status() {
    # Regardless of success of previous commands, obtain what the new
    # current default soundcard is.
    # $nextscdec: The device.description of the new default sound card
    nextscdesc=$( pactl list sinks |
                      grep -e '^Sink' -e 'Description:' -e 'Name:' |
                      grep -A1 -B1 $( pactl get-default-sink ) |
                      grep Description |
                      sed 's/^\s*Description: //' )
}

function display_status() {
    #notify-send "Default sound-card changed to $nextscdesc"

    kill `pidof paswitchmessage` >& /dev/null
    ( exec -a "paswitchmessage" gxmessage -print -nearmouse -timeout 10 "Default sound card is now $nextscdesc" & )
}

green=
red=
yellow=
normal=
bold=
color=
if [ -t 1 ] ; then
    use_colour
fi
declare -a commands=()

# $totalsc: Number of sound cards available
totalsc=$(pactl list sinks | grep "^\s*Desc" | wc -l) # total of sound cards: $totalsc
if [ $totalsc -le 1 ]; then # Check whether there are actually multiple cards available
    gxmessage -print -nearmouse -timeout 5 "Nothing to switch, system only has one sound card." &
    exit
fi

#equaliser_master_device=$(pactl list sinks | sed -n 's/.*device.master_device = "\(.*\)"$/\1/p' )
equaliser_master_device=$(
    echo UNUSED in pipewire at this point # pactl list sink-inputs | grep -e driver: -e sink | grep -A1 module-equalizer-sink.c | sed -n 's/.*sink:.*<\(.*\)>$/\1/p'
                       )

blacklist=$(
    for blacklist in $blacklist ; do
        if [ -e "$blacklist" ] ; then
            sed 's/ *#.*// ; /^$/d' "$blacklist"
        fi
    done
         )

default_sink_name=$( get_default_sink )
get_current_sinks
get_next_sink
set_default_sink $nextsc
set_all_current_active_sinks $nextsc
calculate_status

# only if we want to set everything to the equaliser FFT sink
#set_default_sink $equaliser
#set_all_current_active_sinks $equaliser

display_status

# Below text was from original author and remains unaltered
# CC BY - creative commons
# Thanks God for help :) and guys lhunath, geirha, Tramp and others from irc #bash on freenode.net

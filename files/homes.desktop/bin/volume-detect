#!/bin/bash

# Listen for changes in the system volume, and send a notification so
# the desktop can show the current volume level.  Tuned for display by
# the `dunst` notification service

detect_vol() {
    now=$( date +%s )

    sound=$( amixer -D default -M get Master )
    vol=$( echo "$sound" |
               grep -Pio '(\d+)%' |
               sed 's/%//' |
               head -n 1
       )
    mute=false
    echo "$sound" | grep -q "\[off\]" && mute=true && vol=0

    # allow repeated invocations (holding down the key) not to perform
    # an expensive query every time where it's very unlikely to have
    # updated
    if expr $now - $last_invoke_time \> 1 ; then
        card=$( pactl list sinks |
                    grep -e '^Sink' -e 'Description:' -e 'Name:' |
                    grep -A1 -B1 $( pactl get-default-sink ) |
                    grep Description |
                    sed 's/^\s*Description: //' )
    fi

    last_invoke_time="$now"
}

nl=$'\n'
detect_vol
old_vol=$vol
old_mute=$mute
last_invoke_time=0
pactl subscribe | grep --line-buffered "change" | while read a ; do
    # if any sort of changes occurs, it might be a change in volume
    detect_vol

    if [ "$mute" != "$old_mute" ] && $mute ; then
        notify-send "$card:${nl}Volume: Mute" -h "int:value:$vol" -h string:synchronous:volume-change --icon=audio-volume-muted
    elif [ "$vol" != "$old_vol" ] ; then
        case "$vol" in
            ?|[0-2]?)
                icon=audio-volume-low
                ;;
            [3-4]?)
                icon=audio-volume-medium
                ;;
            [5-9]?|100)
                icon=audio-volume-high
                ;;
        esac
        notify-send "$card:${nl}Volume: $vol" -h "int:value:$vol" -h string:synchronous:volume-change --icon=$icon
    fi
    old_vol="$vol"
    old_mute="$mute"
done

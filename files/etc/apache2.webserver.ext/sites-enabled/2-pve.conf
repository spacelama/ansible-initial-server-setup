<VirtualHost *:80>
    # The ServerName directive sets the request scheme, hostname and port that
    # the server uses to identify itself. This is used when creating
    # redirection URLs. In the context of virtual hosts, the ServerName
    # specifies what hostname must appear in the request's Host: header to
    # match this virtual host. For the default virtual host (this file) this
    # value is not decisive as it is used as a last resort host regardless.
    # However, you must set it for any further virtual host explicitly.
    #ServerName www.example.com

    #   ServerAdmin webmaster@localhost
    ServerAdmin tconnors+webmaster@rather.puzzling.org
    # will redirect from local and remote onto pve load balancer only accessible on the inside:
    ServerName pve.rather.puzzling.org
    ServerAlias pve

    RewriteEngine on
    RewriteCond %{SERVER_NAME} =pve.rather.puzzling.org [OR]
    RewriteCond %{SERVER_NAME} =pve
    RewriteRule ^ https://pve.rather.puzzling.org:8006%{REQUEST_URI} [END,NE,R=permanent]
</VirtualHost>

<VirtualHost *:443>
    # The ServerName directive sets the request scheme, hostname and port that
    # the server uses to identify itself. This is used when creating
    # redirection URLs. In the context of virtual hosts, the ServerName
    # specifies what hostname must appear in the request's Host: header to
    # match this virtual host. For the default virtual host (this file) this
    # value is not decisive as it is used as a last resort host regardless.
    # However, you must set it for any further virtual host explicitly.
    #ServerName www.example.com

    #   ServerAdmin webmaster@localhost
    ServerAdmin tconnors+webmaster@rather.puzzling.org
    # will redirect from local and remote onto pve load balancer only accessible on the inside:
    ServerName pve.rather.puzzling.org

    RewriteEngine on
    RewriteCond %{SERVER_NAME} =pve.rather.puzzling.org [OR]
    RewriteCond %{SERVER_NAME} =pve
    RewriteRule ^ https://pve.rather.puzzling.org:8006%{REQUEST_URI} [END,NE,R=permanent]

    Include /etc/letsencrypt/options-ssl-apache.conf
    SSLCertificateFile /etc/letsencrypt/live/pve.rather.puzzling.org/fullchain.pem
    SSLCertificateKeyFile /etc/letsencrypt/live/pve.rather.puzzling.org/privkey.pem
</VirtualHost>

<VirtualHost *:8006>
    #   ServerAdmin webmaster@localhost
    ServerAdmin tconnors+webmaster@rather.puzzling.org
    # will redirect from local and remote onto pve load balancer only accessible on the inside:
    ServerName pve.rather.puzzling.org

    <Location /*>

        Order allow,deny
        Allow from 192.168.0.0/16

    </Location>

    # FIXME: we don't proxy any spice or VNC connections yet...
    # We really would be a lot better off doing this in nginx:
    # https://forum.proxmox.com/threads/nginx-reverse-proxy-for-spice.89108/
    # or https://forum.proxmox.com/threads/spice-viewer-with-reverse-proxy.87475/
    <IfModule mod_proxy_balancer.c>

        <Proxy "balancer://pvecluster">
            BalancerMember "https://pve1:8006" route=1 keepalive=On smax=1 connectiontimeout=10 retry=600 timeout=900 ttl=900 upgrade=websocket
            BalancerMember "https://pve2:8006" route=2 keepalive=On smax=1 connectiontimeout=10 retry=600 timeout=900 ttl=900 upgrade=websocket loadfactor=2
            BalancerMember "https://pve3:8006" route=3 keepalive=On smax=1 connectiontimeout=10 retry=600 timeout=900 ttl=900 upgrade=websocket loadfactor=5
            ProxySet stickysession=ROUTEID
            # ProxySet lbmethod=byrequests
        </Proxy>

    </IfModule>

    <IfModule mod_proxy.c>

        ProxyPreserveHost On
        ProxyRequests Off
        ProxyErrorOverride On

        SSLProxyEngine On

        # don't know the original author's motivation for saying force-proxy-request-1.0, but it seems to be incompatible with websocket proxies
        #SetEnv force-proxy-request-1.0 1
        #SetEnv proxy-nokeepalive 1

        SSLProxyVerify none
        SSLProxyCheckPeerCN off
        SSLProxyCheckPeerName off
        SSLProxyCheckPeerExpire off

        <Location / >

           # Header add Set-Cookie "ROUTEID=.%{BALANCER_WORKER_ROUTE}e; path=/; HttpOnly" env=BALANCER_ROUTE_CHANGED

           # a lot of this config came
           # from https://forum.proxmox.com/threads/config-dump-apache-load-balancer-fail-over-and-reverse-proxy.131217/
           # but some straight from https://httpd.apache.org/docs/2.4/mod/mod_proxy.html#proxyrequests
           # The combination of reverseproxy, load balancer, sticky sessions is not very well documented,
           # and I ended up adapting this: https://vaadin.com/docs/latest/flow/production/reverse-proxy
           ProxyPass "balancer://pvecluster/" stickysession=ROUTEID nofailover=On
           # upgrade=websocket
           ProxyPassReverse "balancer://pvecluster/"
        </Location>

    </IfModule>

    Include /etc/letsencrypt/options-ssl-apache.conf
    SSLCertificateFile /etc/letsencrypt/live/pve.rather.puzzling.org/fullchain.pem
    SSLCertificateKeyFile /etc/letsencrypt/live/pve.rather.puzzling.org/privkey.pem

#<Proxy "balancer://hotcluster">
#    BalancerMember "http://www2.example.com:8080" loadfactor=1
#    BalancerMember "http://www3.example.com:8080" loadfactor=2
#    ProxySet lbmethod=bytraffic

#</Proxy>

#<Proxy "http://backend">
#    ProxySet keepalive=On
#</Proxy>
#ProxySet "balancer://foo" lbmethod=bytraffic timeout=15
#ProxySet "ajp://backend:7001" timeout=15

#    ProxyPreserveHost On

#    ProxyPass / http://127.0.0.1:8080/
#    ProxyPassReverse / http://127.0.0.1:8080/

    #   SSL Protocol Adjustments:
    #   The safe and default but still SSL/TLS standard compliant shutdown
    #   approach is that mod_ssl sends the close notify alert but doesn't wait for
    #   the close notify alert from client. When you need a different shutdown
    #   approach you can use one of the following variables:
    #   o ssl-unclean-shutdown:
    #	 This forces an unclean shutdown when the connection is closed, i.e. no
    #	 SSL close notify alert is send or allowed to received.  This violates
    #	 the SSL/TLS standard but is needed for some brain-dead browsers. Use
    #	 this when you receive I/O errors because of the standard approach where
    #	 mod_ssl sends the close notify alert.
    #   o ssl-accurate-shutdown:
    #	 This forces an accurate shutdown when the connection is closed, i.e. a
    #	 SSL close notify alert is send and mod_ssl waits for the close notify
    #	 alert of the client. This is 100% SSL/TLS standard compliant, but in
    #	 practice often causes hanging connections with brain-dead browsers. Use
    #	 this only for browsers where you know that their SSL implementation
    #	 works correctly.
    #   Notice: Most problems of broken clients are also related to the HTTP
    #   keep-alive facility, so you usually additionally want to disable
    #   keep-alive for those clients, too. Use variable "nokeepalive" for this.
    #   Similarly, one has to force some clients to use HTTP/1.0 to workaround
    #   their broken HTTP/1.1 implementation. Use variables "downgrade-1.0" and
    #   "force-response-1.0" for this.
    # BrowserMatch "MSIE [2-6]" \
    #		nokeepalive ssl-unclean-shutdown \
    #		downgrade-1.0 force-response-1.0

    #automatically inserted by `certbot --apache`: (also, generate www.$domain alias with: certbot certonly --expand -d rather.puzzling.org,www.rather.puzzling.org
#    Include /etc/letsencrypt/options-ssl-apache.conf
#    SSLCertificateFile /etc/letsencrypt/live/pve.rather.puzzling.org/fullchain.pem
#    SSLCertificateKeyFile /etc/letsencrypt/live/pve.rather.puzzling.org/privkey.pem
</VirtualHost>

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet

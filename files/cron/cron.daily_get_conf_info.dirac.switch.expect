#!/usr/bin/expect

# login to TP-Link TL-SG3216 24 port 1gbit managed switch to grab
# running-config vs start-config, and if there's a diff, warn us

# expects to be invoked from get_conf_info.switch

proc slurp {file} {
    set fh [open $file r]
    set ret [read $fh]
    close $fh
    return $ret
}

proc lshift listVar {
    upvar 1 $listVar l
    set r [lindex $l 0]
    set l [lreplace $l [set l 0] 0]
    return $r
}

## Access CLI
set switchAddress [lshift argv]
set switchPrompt [lshift argv]

puts "switchAddress = $switchAddress"
puts "switchPrompt = $switchPrompt"

if {[file exists /usr/local/etc/get_conf_info.$switchAddress.ssh-pass]} {
   set sshPassword [string trim [ slurp "/usr/local/etc/get_conf_info.$switchAddress.ssh-pass" ] ]
#   puts "Got ssh password: $sshPassword"
}
if {[file exists /usr/local/etc/get_conf_info.$switchAddress.enable-pass]} {
   set enablePassword [string trim [ slurp "/usr/local/etc/get_conf_info.$switchAddress.enable-pass" ] ]
#   puts "Got enable password: $enablePassword"
}


## Expect Parameters
set timeout 20
set match_max 10000

set successMsg "Status: Success"
set failureMsg "Status: Failure"

spawn ssh $switchAddress
expect_after eof {exit 0}

set timeout 10

puts "\n## Starting ssh... ##\n"
##interact with SSH
while { 1 } {
   expect "yes/no" {
      puts "accepting yes/no prompt for keys"
      send "yes\r"
   } "$switchAddress's password:" {
      puts "sending ssh password"
      send "$sshPassword\r"
   } "$switchPrompt>" {
      puts "Enabling Config"
      send "enable\r"
   } "Password:" {
      puts "Sending enable password"
      send "$enablePassword\r"
   } "Error password" {
      puts "Error enable password"
      abort
   } "$switchPrompt#" {
      puts "exiting login loop"
      break
#   } -re . {
#      puts "\nUnexpected prompt - found: '$expect_out(buffer)'\n"
#      abort
   }
}

# Might be able to get around the pager by using "terminal datadump"
# or "terminal length 1536" or "terminal length 0", otherwise just
# ignore the error that gives back:
#
#  ( we're also sending "\r" just to print the prompt again after
#    having exited the previous loop )
send "terminal length 0\r"

puts "\n## Starting Gather Script... ##\n"
set timeout 20

expect "$switchPrompt#"
for {set i 0} {$i < [llength $argv]} {incr i 1} {
#   set chan [open "[lindex $argv $i]" w]
   puts "\n## Parsing arg $i: [lindex $argv $i]"
   send "[lindex $argv $i]\r"
#   expect "show"
   set log_filename "[lindex $argv $i]"
   set log_filename [regsub -all { } $log_filename {_}]
   set log_filename [regsub -all {/} $log_filename {_}]
   log_file -noappend "$log_filename"
   while { 1 } {
      expect "$switchPrompt#" {
         log_file
         break
      } -re "Press any key to continue .Q to quit.|--More--" {
         send " "
#         expect "\r"
#      } "\r" {
#         puts $chan "$expect_out(buffer)"
      }
   }
#   close $chan
}
#send "exit\r"

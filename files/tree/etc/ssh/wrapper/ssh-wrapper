#!/usr/bin/env perl
# -*- Mode: cperl; cperl-indent-level: 4; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4; c-basic-indent: 4; case-label: 4 -*-
# vi: set ai tabstop=4 expandtab softtabstop=4 shiftwidth=4:

# allow a user/admin to have a locked down list of commands (defaults
# to rsync/scp/sftp) that can be accepted in this account/keypair
# combo.  If /etc/ssh/wrapper/local-wrapper exists, that is
# additionally sourced by this script to allow additional sets of
# programs and program args to be accepted

use strict;
use warnings;
use File::Glob ':glob';
use Sys::Syslog qw(:standard);
use Text::ParseWords;

# all of these default allowed programs can be overriden by the admin
# supplying their own list of programs in their ssh authorized_keys:
# command=".../ssh-wrapper <program1> [--allow-all-args] <program2> ..."
my $scp_server    = "/usr/bin/scp";
my $rsync_server  = "/usr/bin/rsync";
my $sftp_server1  = "/usr/lib64/ssh/sftp-server";
my $sftp_server2  = "/usr/libexec/openssh/sftp-server";
my $sftp_server3  = "/usr/lib/openssh/sftp-server";
my %allowed_progs = ("scp" => $scp_server,
                     "rsync" => $rsync_server,
                     $sftp_server1 => $sftp_server1,
                     $sftp_server2 => $sftp_server2,
                     $sftp_server3 => $sftp_server3);
my %all_args_allowed=($sftp_server1 => 1,
                      $sftp_server2 => 2,
                      $sftp_server3 => 3);

sub writelog;
sub include;
sub fail;
sub success;

my $command;

my $ppid=getppid;
my $username=getpwuid( $< );
openlog("ssh/ssh-wrapper[$$]/[$ppid] ($username)", "", "user");

# allow the user/admin to override what programs are allowed by
# supplying it on the commandline within authorized_keys (overriding
# rsync/scp/sftp etc to become illegal):
if (@ARGV) {
    %allowed_progs=();
    my $prev_cmd;
    foreach my $arg (@ARGV) {
        if ($arg eq "--allow-all-args") {
            # allow the previously allowed command to accept any arguments
            $all_args_allowed{$prev_cmd}=1;
            writelog("$prev_cmd is allowed to supply any arguments");
        } else {
            $allowed_progs{$arg}=$arg;
            writelog("$arg is allowed by admin/user");
            $prev_cmd=$arg
        }
    }
}

# local-wrapper will be able to override whether a login without
# command is allowed to succeed, but by default sh doesn't appear in
# %allowed_progs, so gets blocked below
$command = $ENV{SSH_ORIGINAL_COMMAND} || "sh";

# should behave as much like a shell as possible (without the security
# flaws!) -- allow user to stop splitting of args on whitespace, when
# they are single quoted or escaped etc, and expand out $HOME, $USER,
# $$, $PRJ_DATA etc.  But of course, can't safely make use of eval()
# FIXME: shellwords isn't complete - testing shows you can't escape an
# escape, and from the regexp in ParseWords.pm, it's clear that '\\"'
# will be a problem
my @argv = shellwords($command);
if ((@argv == 1) && ($argv[0] =~ / /)) {
    # If the user passes the entire invocation as a single quoted
    # argument with spaces in it, then it's something sshd normally
    # passes to /bin/sh and it just runs it with those arguments
    # FIXME: This can't possibly be right, although ssh does normally
    # insist on offloading the entire problem to /bin/sh.
    @argv = shellwords($argv[0]);
}
if (!@argv) {
    fail "commandline parse error";
}
#print "argv=". join(' ; ', @argv) . "\n";
my $program = shift @argv;

my @SSH_CONNECTION = split(' ', $ENV{'SSH_CONNECTION'});
my $SSHClient = $SSH_CONNECTION[0];
my $SSHHost   = $SSH_CONNECTION[2];

# sanitize environment, but make sure local-wrapper can still access the original environment if required
my %env=%ENV;
%ENV = ();
for my $allowed_env (qw(HOME USER PRJDATA DISPLAY XAUTHORITY)) {
    $ENV{$allowed_env} = $env{$allowed_env} if defined $env{$allowed_env};
}

my $gmt = gmtime();

my @runargs=();

my $args_ok = 0;
# give local-wrapper the ability to extend %allowed_progs, do extra arg munging etc
include '/etc/ssh/wrapper/local-wrapper'
  if (-e "/etc/ssh/wrapper/local-wrapper");

fail "account restricted", "program not allowed"
  unless defined $allowed_progs{$program};

if ($program eq "scp") {
    foreach my $arg (@argv) {
        if ($arg eq '-t' || $arg eq '-f') {
            $args_ok = 1;
            push @runargs, shift @argv;
            last;
        }
    }
} elsif ($program eq "rsync") {
    if ($#argv >= 0 && $argv[0] eq "--server") {
        $args_ok = 1;
        push @runargs, shift @argv;
    }
} elsif ($all_args_allowed{$program}) {
    $args_ok = 1;
}

fail "account restricted", "args not allowed" unless $args_ok;

foreach my $a (@argv) {
    # To behave more like a shell, we need to expand out environment
    # variables such as $USER, $HOME, $$, $PRJDATA etc, only after
    # $ENV has been sanitised, but before globbing
    # FIXME: need to not expand $VARIABLE when a single escape
    # character is front of it.  But do need to expand if $VARIABLE is
    # first thing on line (so can't anchor with non "\" before match.
    $a =~ s/\$([A-Za-z_0-9]+)/$ENV{$1}/g;

    # bsd_glob not susceptible to C shell injection like normal perl
    # glob, nor splits on whitespace (man File::Glob)
    my @globs=bsd_glob($a, GLOB_NOCHECK | GLOB_TILDE);
#    my @globs=glob($a);
#    print STDERR "globs after = @globs\n";
    push @runargs, @globs;
}

success;
exec($allowed_progs{$program}, @runargs);

#subroutines with full access to lexical globals above:
sub writelog {
    my ($msg)=(@_);
    # break long lines into sets of 320 characters so syslog doesn't
    # truncate them, but long enough that context is adequate when
    # reviewing logs
    my @syslog_items=unpack('(A512)*', $msg);
    foreach my $syslog (@syslog_items) {
        syslog("notice", $syslog);
    }
}

sub expand_invocation_str {
    # takes $program, @runargs as arguments, and assumes values from
    # global %ENV, and global %allowed_progs has an entry for $program
    my ($program, @runargs) = (@_);
    my $print_runargs_str = join (" ", map{"'$_'"} @runargs);
    my $print_env_str = join (" ", map{"$_='$ENV{$_}'"} keys %ENV);
    my $print_prog_str="";
    $print_env_str = "env $print_env_str " if $print_env_str ne "";
    $print_prog_str = " (=$allowed_progs{$program})" if ($program ne $allowed_progs{$program});

    my $invocation_str="$program $print_runargs_str$print_prog_str";
    return ($invocation_str, $print_env_str);
}

sub success {
    my ($invocation_str, $env_str) = expand_invocation_str($program, @runargs);
    writelog("success: $SSHClient->$username\@$SSHHost: $invocation_str");
    writelog("    env: $env_str");
}

sub fail {
    my ($msg,$syslog) = @_;
    if (!defined $syslog) {
        $syslog=$msg;
    }
    $allowed_progs{$program} = "NO \$program=$program MAPPING FOUND" if !defined $allowed_progs{$program};
    my ($invocation_str, $env_str) = expand_invocation_str($program, @argv);
    writelog("fail: $syslog: $SSHClient->$username\@$SSHHost: $invocation_str");
    writelog(" env: $env_str");
    print STDERR "$0: ", $msg, "\n";
    exit 1;
}
sub include($) {
    # http://www.perlmonks.org/?node_id=393426
    package DB;   # causes eval to evaluate the string in the caller's
    # scope.  Sometimes perl can be truly horrendous
    my ($filename) = @_;
    my $code = qq[#line 1 "$filename"\n] .
      `cat "$filename"`;
#     print STDERR "evaling code: $code\n";
    eval $code;
    if ($@) {
        die "$@";
    }
#     print STDERR "done...\n";
}


#!/bin/ksh
# -*- Mode: shell-script -*-
#template by ~tconnors/bin/newshscript
#Thu May  1 17:20:13 EST 2008
# $Revision: 1.10 $ $Date: 2023/06/24 14:00:03 $
# $Id: colorize,v 1.10 2023/06/24 14:00:03 tconnors Exp $
# $Header: /home/tconnors/cvsroot/bin/colorize,v 1.10 2023/06/24 14:00:03 tconnors Exp $
# $RCSfile: colorize,v $

# This program colorizes the text in the commandline args

#set -x 

highlight() {
    if $notty ; then
        return
    fi
    hi="$2"

    esc="\033["
    if $hi ; then
        bold=";1"
    else
        bold=
    fi
    case "$3" in
        grey|black)     back="40;"
                        ;;
        red)            back="41;"
                        ;;
        green)          back="42;"
                        ;;
        yellow)         back="43;"
                        ;;
        blue)           back="44;"
                        ;;
        magenta|purple) back="45;"
                        ;;
        cyan)           back="46;"
                        ;;
        white)          back="47;"
                        ;;
        no|false|"")    back=
                        ;;
        *)              echo -ne "${open}${esc}32;1m${close}"
                        return
                        ;;
    esac
    case "$1" in 
        grey|black)     echo -ne "${open}${esc}${back}30${bold}m${close}"
                        ;;
        red)            echo -ne "${open}${esc}${back}31${bold}m${close}"
                        ;;
        green)          echo -ne "${open}${esc}${back}32${bold}m${close}"
                        ;;
        yellow)         echo -ne "${open}${esc}${back}33${bold}m${close}"
                        ;;
        blue)           echo -ne "${open}${esc}${back}34${bold}m${close}"
                        ;;
        magenta|purple) echo -ne "${open}${esc}${back}35${bold}m${close}"
                        ;;
        cyan)           echo -ne "${open}${esc}${back}36${bold}m${close}"
                        ;;
        white)          echo -ne "${open}${esc}${back}37${bold}m${close}"
                        ;;
        normal)         echo -ne "${open}${esc}0m${close}"
                        ;;
        *)              echo -ne "${open}${esc}32;1m${close}"
                        ;;
    esac
}

directoutput() {
    if $stderr ; then
        exec 1>&2
    fi
}

usage() {
    echo "Usage: $0 [--stderr] [--notty] [-n|--nolf] [--PS1prompt] [--background <bg>] (bright|dark)? <color> <text>" 1>&2
    if [ -n "$1" ] ; then
        exit $1
    fi
    exit
}

usageerror() {
    if [ "$#" != 0 ] ; then
        echo "Usage error: $@" 1>&2
        echo "Usage was $ARGS" 1>&2
    fi
    usage 1
}

parseinput() {
    ARGS="$*"
    open=
    close=
    nolf=false
    colour=
    stderr=false
    notty=false
    hi=false
    bg=false
    first=true
    while : ; do
        if ! $first ; then
            shift
        fi
        if [ "$#" -eq 0 ] ; then    #god, I wish there was an unshift in bash
            break
        fi
        first=false
        arg="$1"
        case "$arg" in
            --notty)
                if [ ! -t 1 ] ; then
                    notty=true
                fi
                ;;
            -n|--nolf)
                nolf=true
                ;;
            --PS1prompt)
                open='\['
                close='\]'
                nolf=true
                ;;
            --background)
                bg="$2"
                shift
                ;;
            --stderr)
                stderr=true
                ;;
            --help)
                usage
                ;;
            --)
                shift
                break
                ;;
            -*)
                usageerror "Unknown option \"$arg\""
                ;;
            *)
                break
                ;;
        esac
    done
    if [ "$#" -lt 2 ] ; then
        usageerror "supply color and text"
    fi
    case "$1" in
        bright)
	    hi=true
            shift
            ;;
        dark)
            hi=false
            shift
            ;;
    esac
    colour="$1"
    shift

    #assign all uneaten params to an array
    i=0
    for arg in "$@" ; do
        args[i]="$arg"
        i=$(($i+1))
    done
}

args=()
parseinput "$@"

directoutput
highlight "$colour" $hi $bg
echo -n "${args[@]}"
highlight normal false
$nolf || echo


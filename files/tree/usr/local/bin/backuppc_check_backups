#!/bin/bash
# -*- Mode: shell-script -*-

# checks /.backuppc_status to make sure that all local paths are
# included except for documented exeptions

logf=/.backuppc_status
date=$( date +%s )
# excludes should be escaped in the same way paths in /etc/mtab is escaped
excludes=( "/proc/.*" "/sys/.*" "/dev/.*" "/run/.*" "/backuppc" "/snapshots" "/home/tconnors/.mp3.low_qual" "/var/spool/squid" "/tank[^/]*" "/mnt/.*" "/media/.*" "/mnt/olddirac" "/var/cache/.*" ".*not_backed_up.*" ".*scratch" "/external_backups" "/tmp" "/home/angela" "/piroot-new" ".*subvol.*" ".*basevol.*" "/rpool.*" "/wavlink" "/net/.*" "/var/snap/.*" "/var/lib/jellyfin-transcodes" "/jellyfin" "/home/angela/media" "/angela"  ) # FIXME: we do want /hdd/template/iso though.  Only thing we don't want is  /hdd/subvol-* - perhaps we should be excluding those instead; jellyfin mounted from fs:.../movies
exclude_types=( "tmpfs" "devtmpfs" "devpts" "sysfs" "proc" "udf" "squashfs" "nfs" "nfs3" "nfs4" "fuse.sshfs" "fuse.lxcfs" "autofs" "fuse.afuse" )
# exclude tuples of: "$dev $type $fs", in array of regexp form
exclude_dev_type_matches=( "/dev/mapper/hdd.*/home/tconnors/.*" ) # these are bind mounted in
HOST=$( hostname )

function get_logentry() {
    local logentry="$1"
    local HOST="$2"
    local log="$3"
    sed -n "s@^$HOST:$logentry @@p" "$log" 2>/dev/null | head -n 1 | awk '{print $1}'  # head just in case the sed substituion went bad and we have repeat lines.  want to pick the earlier occurence so we flag the error
}

function exclude() {
    while read -r dev type fs ; do
        for exclude_type in "${exclude_types[@]}" ; do
            if echo "$type" | grep -q "^$exclude_type\$" ; then
                # echo "fs $fs ($type) deliberately excluded"
                continue 2
            fi
        done

        for exclude in "${excludes[@]}" ; do
            if echo "$fs" | grep -q "^$exclude\$" ; then
                # echo "fs $fs deliberately excluded"
                continue 2
            fi
        done

        for exclude_dev_type_match in "${exclude_dev_type_matches[@]}" ; do
            if echo "$dev $type $fs" | grep -q "^$exclude_dev_type_match\$" ; then
                # echo "fs $fs deliberately excluded"
                continue 2
            fi
        done

        echo "$dev $type $fs"
    done
}
# we need to do the filtering that df does by default to remove
# duplicate (eg bind mounted) filesystems that are just subsets of
# what are already ensured to be backed up, eg, if / and
# /var/snap/firefox both map back to the /dev/mapper/dirac-root
# device, then don't list /var/snap/firefox separately
function filter_bindmount_children() {
    lastdev=
    lasttestfs=
    while read -r dev type fs ; do
        # ensure we're always testing directories with "/" at the end of them
        if [[ "$testfs" == */ ]] ; then
            testfs="$fs"
        else
            testfs="$fs/"
        fi
        # echo "$dev =? $lastdev" 1>&2
        if [ "$dev" = "$lastdev" ] ; then
            if [[ "testfs" == "$lasttestfs"* ]] ; then
                # echo "****supressing: $fs"
                : # we are a child of a directory already checked, so supress output
            else
                echo "$dev $type $fs"
            fi
        else
            #we're definitely on a new device, so always output the first match
            echo "$dev $type $fs"
        fi

        lastdev="$dev"
        lasttestfs="$testfs"
    done
}

split_out_ceph_pools() {
    # if ceph, we want to iterate through each of
    # /mnt/pve/\(ceph[^/]*\)/mounts/\([^/]*\) and make sure they are
    # being backed up
    while read dev type fs ; do
        # first get the parent filesystem (as well as non-ceph filesystems)
        echo "$dev $type $fs"
        # then iterate into the /mounts/ directory on the filesystem if present
        if [ "$type" = ceph ] ; then
            if [ -e "$fs/mounts" ] ; then
                for client_mount in "$fs"/mounts/*/*/ ; do
                    echo "$dev $type $client_mount"
                done
            fi
        fi
    done
}

# read the list of "$dev $type $fs" and output "$dev $type $fs $limit"
# with out business rules of which limits apply to which filesystems,
# defaulting to 10 days
define_limits() {
    while read dev type fs ; do
        case "$fs@$HOST" in
            *@maxwell|*@fermi)
                epoch_warning=$((date-86400*30))
                ;;
            /home/tconnors/thesis@*)
                epoch_warning=$((date-86400*30))
                ;;
            *)
                epoch_warning=$((date-86400*10))
                ;;
        esac
        echo "$dev $type $fs $epoch_warning"
    done
}

msg=$(
    # get dev, fstype and destination from /etc/mtab, filter out those
    # types we don't care about, then unescape destination
    cat /etc/mtab | awk '{print $1, $3, $2}' |
        exclude |
        sort |
        filter_bindmount_children |
        sort | uniq |
        split_out_ceph_pools |
        define_limits |
        while read -r dev type fs epoch_warning ; do
            # unescape fs
            fs=$( printf "%b" "$fs" )

            log="$logf"
            check_host="$HOST"
            if [ "$type" = ceph ] ; then
                log="$fs$logf"
                check_host="[^ ]*"   # we only require one host, any host, to back it up
            fi
            logentry=$( get_logentry "$fs" "$check_host" "$log" )
            if [ -n "$logentry" ] ; then
                if [ $logentry -gt $epoch_warning ] ; then
                    :
                else
                    backed_up=$( date -d "1970-01-01 UTC $logentry seconds" )
                    echo "$HOST:$fs not attempted to be backed up since: $backed_up"
                fi
            else
                echo "$HOST:$fs not recorded in $log status file "
            fi
        done
   )

if [ -n "$msg" ] ; then
    (
        echo "$msg"
        echo
        echo $HOSTNAME:$0
    ) | mail -s "Backups incomplete: $HOST" root
fi

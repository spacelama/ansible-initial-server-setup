#!/usr/bin/env perl
# -*- Mode: perl -*-
#template by ~tconnors/bin/newplscript
#Sun May 18 01:05:12 EST 2003

use strict;
#use warnings;

my ($subst,$str,$chars,$keep1,$keep2,$strip_position,$left,$escapechars);

if ( defined $ARGV[0] && ( $ARGV[0] eq "--escapechars" || $ARGV[0] eq "--stripnewline")) {
  $escapechars=1;
  shift;
}
if ( @ARGV < 4 or $ARGV[0] ne "--left" and $ARGV[0] ne "--middle" and $ARGV[0] ne "--right" ) {
   print STDERR "Usage: $0 [--escapechars] <--left|--middle|--right> <abbreviate substitution> <length> <text>\n";
   print STDERR "Limits output to something intended to fit on the screen\n";
   print STDERR "\n";
   print STDERR "  --escapechars   quote the string such that it will survive shell expansion etc\n";
   print STDERR "  --left          keep the left portion of the string\n";
   print STDERR "  --middle        chomp the middle portion of the string\n";
   print STDERR "  --right         keep the right portion of the string\n";
   print STDERR "  --help          this help text\n";
   print STDERR "  <abbreviate substitution> what to substitute with - typically '...'\n";
   print STDERR "  <length>                  length to limit text to\n";
   print STDERR "  <text>                    whatever text it is that you're limiting\n";
   exit 1;
}

if ( $ARGV[0] eq "--left" ) {
    $strip_position="left";
}elsif ( $ARGV[0] eq "--middle" ) {
    $strip_position="middle";
}elsif ( $ARGV[0] eq "--right" ) {
    $strip_position="right";
}
shift;
$subst=$ARGV[0] ; shift;
$chars=$ARGV[0] ; shift;

$str="@ARGV";
if ($escapechars) {
  $str =~ s/\n/;/g;
  $str =~ s/\\/!/g;
}
#print STDERR "str -> $str\n";
#sleep 1;
if (length("$str") > $chars) {
  $keep1=$keep2=$chars;
  if ( $strip_position eq "middle" ) {
    $keep1 = int($keep1/2);
    $keep2 = $chars - $keep1;
  }

  if ( $strip_position eq "left" ) {
    $str =~ s/^(.{$keep1}).*$/$1$subst/;
  } elsif ( $strip_position eq "middle" ) {
    $str =~ s/^(.{$keep1}).*(.{$keep2})/$1$subst$2/;
  } elsif ( $strip_position eq "right" ) {
    $str =~ s/^.*(.{$keep2})$/$subst$1/;
  }
}
print "$str";


#!/bin/bash

# x takes a shell snippet, with shell characters allowed, and runs it.
# It can either be in a single arg or in a bunch of args. But if you
# want to provide a file with a space in it, or a literal special
# character, you have to escape it (eg with printf "%q") yourself.

# xterm might fail, due to for example running out of X11 client handles
retry() {
    "$@" && return
    while : ; do
          echo "$(date): xterm failed with exit-code: $?.  Retrying in a minute..."
          sleep 60
          verboserun "$@" && return
    done
}

eval="verboserun"
noshell=true
verbose=true
while [[ "$1" == --* ]] ; do
    case "$1" in
        --wait)
            shift
            eval='wait-and-query-rerun'
            ;;
        --noverbose)
            shift
            verbose=false
            ;;
        --no-eval)
            shift
            eval=
            ;;
        --shell)
            shift
            noshell=false
            ;;
        *)
            break
            ;;
    esac
done

if [ $eval == wait-and-query-rerun ] ; then
    if $verbose ; then
        eval="$eval --verbose"
    fi
    if ! $noshell ; then
        eval="$eval --shell"
    fi
fi

args=()
while [[ "$1" == -* ]] ; do
    args+=("$1")
    shift
done

cmds=()
while [ $# != 0 ] ; do
    cmd="$1"
#    if $noshell ; then
#        cmd="$( printf "%q" "$cmd" )"
#    fi
    cmds+=("$cmd")
    shift
done

if [ "${#cmds[@]}" != 0 ] ; then
    retry xterm "${args[@]}" -e bash $eval "${cmds[@]}" # ${cmds[*]}
else
    retry xterm "${args[@]}"
fi &

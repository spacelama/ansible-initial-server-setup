#!/bin/bash

# x takes a shell snippet, and runs it (with shell characters allowed
# if you say --shell, however if you want to provide a file with a
# space in it, or a literal special character, you have to escape it
# (eg with printf "%q") yourself).  It can either be in a single arg
# or in a bunch of args.


# xterm might fail, due to for example running out of X11 client
# handles - keep retrying until it succeeds (this might just endlessly
# retry if you supply bogus arguments to xterm, however, in which case
# at least you get the PID printed out so you can kill it manually)
retry() {
    "$@" && return
    return_code=$?
    this_pid=$BASHPID
    while : ; do
        echo "$(colorize bright green $( date ) ): $( colorize bright red $this_pid ): $( colorize bright yellow "$( printf "%q " "$@")" ) $( colorize bright red Failed $return_code ).  Retrying in a minute (in the background)...  kill with:"
        echo "  kill $this_pid"
        sleep 60
        verboserun "$@" && return
        return_code=$?
    done
}

eval="verboserun"
noshell=true
verbose=true
while [[ "$1" == --* ]] ; do
    case "$1" in
        --help)
            echo "Usage: x [--help] [--wait] [--noverbose] [--no-eval] [--shell] [--] [-other-xterm-flags...] [--] <prog> [<args>]" 1>&2
            exit 1
            ;;
        --wait)
            shift
            eval='wait-and-query-rerun'
            ;;
        --noverbose)
            shift
            verbose=false
            ;;
        --no-eval)
            shift
            eval=
            ;;
        --shell)
            shift
            noshell=false
            ;;
        *)
            break
            ;;
    esac
done

if [ $eval == wait-and-query-rerun ] ; then
    if $verbose ; then
        eval="$eval --verbose"
    fi
    if ! $noshell ; then
        eval="$eval --shell"
    fi
fi

args=()
reading_between_dashes=false
if [ "$1" = -- ] ; then
    reading_between_dashes=true
    shift
fi
while $reading_between_dashes || [[ "$1" == -* ]] ; do
    if [ "$1" == -- ] ; then
        shift
        break
    fi
    args+=("$1")
    shift
done

cmds=()
while [ $# != 0 ] ; do
    cmd="$1"
    #    if $noshell ; then
    #        cmd="$( printf "%q" "$cmd" )"
    #    fi
    cmds+=("$cmd")
    shift
done

if [ "${#cmds[@]}" != 0 ] ; then
    retry xterm "${args[@]}" -T "x: $PWD ${cmds[*]}" -e bash $eval "${cmds[@]}" # ${cmds[*]}
else
    retry xterm "${args[@]}"
fi &

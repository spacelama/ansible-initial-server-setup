#!/bin/bash

function usage() {
    cat 1>&2 <<EOF
git-grep-all-commits [--all-branches] [--show-commits|--show-all-commits|--show-only-lines|--show-whole-files] [git-grep/git-log --regexp options (eg, -i)] <search-regexp>
performs various forms of grep within each commit in git

  --all-branches
  --show-commits                Shows the commits that match (default)
  --show-all-commits            Show all commits that match rather than those responsible for the change
  --show-only-lines             Show only the lines that match rather than the full commit
  --show-whole-files            Show the whole file rather than the commit diffs
  -h|--help                     Display this help and exit
EOF
    if [ -n "$1" ] ; then
        exit $1
    fi
    exit
}

function usageerror() {
    if [ "$#" != 0 ] ; then
        echo "Usage error:" "$@" 1>&2
        echo "Usage was:${ARGS:- <no args>}" 1>&2
    fi
    usage 1
}

ARGS=
for ARG in "$@" ; do
    ARGS="$ARGS \"$ARG\""
done

#TEMP=$(getopt -o 'cghw::V' --long 'help,wdiff::,git,ccdiff' -n "$0" -- "$@")
#eval set -- "$TEMP"

mode=show-commits
options=(--basic-regexp) # can be overriden by the user supplying --perl-regexp, --extended-regexp
branches=
while [[ "$1" == -* ]] ; do
    case "$1" in
        --all-branches)
            branches=--all
            ;;
        --show-commits)
            mode=show-commits # default
            ;;
        --show-all-commits)
            mode=show-all-commits
            ;;
        --show-only-lines)
            mode=show-only-lines
            ;;
        --show-whole-files)
            # mode=show-whole-files

            # pickaxe-all wants to show all files in the commit when
            # supplied to git-log, but the user might then limit it
            # back down if there are other parameters such as pathname
            # filters supplied on the cmdline
            options+=(--pickaxe-all)
            ;;
        -h|--help)
            usage
            ;;
        *)
            options+=("$1")
            ;;
    esac
    shift
done

# by parsing out options and putting after -G <regexp>
case "$mode" in
    show-commits)
        # default: pickaxe (regexp added, deleted or moved), show diff
        git log $branches -p "${options[@]}" -G "$@" # | less -F -R -X -j.1 ++/"$1"
        ;;
    show-all-commits)
        # FIXME:
        echo not implemented...
        ;;
    # show-whole-files)
    #     echo "experimental!!!"

    #     git log $branches -G "$@" "${options[@]}"

    #     echo "experimental!!!"
    #     ;;
    show-only-lines)
        # FIXME: first arg or options and arg should go before git rev-list as now, and args beyond that should go after branch/HEAD
        git grep "${options[@]}" "$@" $(git rev-list "${branches:-HEAD}")
        ;;
    *)
        echo "unknown mode: $mode" 1>&2
        exit 1
esac


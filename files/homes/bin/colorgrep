#!/usr/bin/env perl
# -*- Mode: perl -*-
#template by ~tconnors/bin/newplscript
#Tue Aug 31 20:09:38 EST 2004

# $Revision: 1.24 $ $Date: 2025/05/24 10:19:46 $
# $Id: colorgrep,v 1.24 2025/05/24 10:19:46 tconnors Exp $
# $Header: /home/tconnors/cvsroot/bin/colorgrep,v 1.24 2025/05/24 10:19:46 tconnors Exp $
# $RCSfile: colorgrep,v $

# This program colourises lines that have a matched RE in them
# Accepts many of the flags that normal grep accepts, and then adds some

# Copyright Tim Connors (2004).
# tconnors+colorgrep@remove.the.spam.astro.swin.edu.au
# GPL v2 license applies:
# http://www.gnu.org/licenses/gpl.txt

use strict;
use warnings;

my (@SAVEARGV)=@ARGV;

sub usageerror(;$) {
  my ($error)=(@_);
  if (defined($error)) {
    print STDERR "Usage error: $error\n";
    print STDERR "Usage was: $0 @SAVEARGV\n";
  }
  usage(1);
}

sub usage(;$) {
  my ($exit)=(@_);
  print STDERR "Usage: $0 [--exact-match|-X] [--exact-wholeline-match|-x] [--ignore-case|-i] [--partial|-p (WARNING: causing confusion in overlapping -e RE args)] [--invert-match|-v] [--ignore-lines-no-match (implies --partial)|-N] (-e <re1> -e <re2>... | <re>) <files>\n";
  $exit=defined($exit) ? $exit : 0;
  exit $exit;
}

my ($exact_match,$exact_wholeline_match,$highlight_fullline,$invert_match,$ignore_case,$ignore_lines_no_match,$colour);

my (@REs);

sub parseinput() {
  $highlight_fullline=1;
  $invert_match=0;
  $ignore_case=0;
  $ignore_lines_no_match=0;
  $exact_match=0;
  $exact_wholeline_match=0;
  $colour="red";

  while (defined($_= shift (@ARGV))) {
    /^--exact-match$|^-X$/ && do { $exact_match=1 ; 1; } ||
    /^--exact-wholeline-match$|^-x$/ && do { $exact_wholeline_match=1 ; 1; } ||
    /^--ignore-lines-no-match$|^-N$/ && do { $ignore_lines_no_match=1 ; $highlight_fullline=0 ; 1; } ||
    /^--ignore-case$|^-i$/ && do { $ignore_case=1 ; 1; } ||
    /^--partial$|^-p$/ && do { $highlight_fullline=0 ; 1; } ||
    /^--invert-match$|^-v$/ && do { $invert_match=1 ; 1; } ||
    /^--colour$|^-c$/ && do { $colour=shift(@ARGV) ; 1; } ||
    /^-e$/ && do { push @REs, shift(@ARGV) ; 1; } ||
    /^--help$/ && usage() ||
    /^--$/ && do { $_=shift(@ARGV) ; last ; } ||
    /^-/ && usageerror("Unrecognised switch: $_") ||
    last;
  }
  defined($_) && unshift @ARGV, $_;
  if (!@REs) {
    my $re=shift(@ARGV);
    if (!defined $re) {
      usageerror("no RE supplied");
    }
    @REs=($re);
  }
#  if (!@ARGV) {
#    usageerror("No files supplied");
#  }
}

#if ((@REs > 1) && !$highlight_fullline) {
#  print STDERR, "WARNING: Can't supply multiple -e and --partial\n";
#  $highlight_fullline=1;
#}

#########################

# ANSI sequences for colours
my %colour;
$colour{white}       = "\033[1;37m";
$colour{yellow}      = "\033[1;33m";
$colour{green}       = "\033[1;32m";
$colour{blue}        = "\033[1;34m";
$colour{cyan}        = "\033[1;36m";
$colour{red}         = "\033[1;31m";
$colour{magenta}     = "\033[1;35m";
$colour{black}       = "\033[1;30m";
$colour{darkwhite}   = "\033[0;37m";
$colour{darkyellow}  = "\033[0;33m";
$colour{darkgreen}   = "\033[0;32m";
$colour{darkblue}    = "\033[0;34m";
$colour{darkcyan}    = "\033[0;36m";
$colour{darkred}     = "\033[0;31m";
$colour{darkmagenta} = "\033[0;35m";
$colour{darkblack}   = "\033[0;30m";
$colour{OFF}         = "\033[0;0m";

parseinput();


my $match=$colour{$colour};
my $normal=$colour{OFF};
my $line;
if ($invert_match) {  # grep -v: a bit of a hack, but seems to
                      # work. When you're printing out every line
                      # anyway, is a invert_match switch really needed?
  ($match,$normal)=($normal, $match);
  print "$normal";
}
my $exit=1;
my $many_files = (@ARGV > 1);
my $file=$ARGV[0];
while (defined ($line=<>)) {
  # if line first tests for the RE and then a case sensitive version
  # of the RE, if appropriate. Then theres that special condition that
  # if we are both inverting the match, and only printing out lines
  # that actually match (like grep -v normally works), in which case
  # we negate the above. This latter condition is not really necessary
  # for a colorgrep, since it makes colorgrep redundant, but if people
  # want to use this as a replacement for normal grep (alias
  # grep='colorgrep -p -N'), we might as well cater for that
  # possibility.
  my $prepend = $many_files ? "$file: " : "";
  my $found_match_this_line=0;
  foreach my $re (@REs) {
    my $exact_matchindex=index($line,$re);
    chomp(my $chomped_line=$line);
    if ((
         (!$exact_match && !$exact_wholeline_match &&
          ($line =~ /$re/ || ($ignore_case && $line =~ /$re/i))) ||
         ($exact_match        && ($exact_matchindex != -1)) ||
         ($exact_wholeline_match && ($chomped_line eq $re))
        )
        # if inverting the match and not printing non matching lines,
        # then the above test needs to fail for us to pass through to
        # the printing case, hence XOR:
        ^
        ($ignore_lines_no_match && $invert_match)
       ) {
      $exit=0;
      $found_match_this_line=1;
      if ($exact_match || $exact_wholeline_match) {
        if ($highlight_fullline) {
          $line = "$match$line$normal";
        } else {
          my $preline = substr $line,0,$exact_matchindex;
          my $postline = substr $line,$exact_matchindex+length($re);
          $line = "$preline$match$re$normal$postline";
        }
      } elsif ($highlight_fullline) {
        if ($ignore_case) {
          $line =~ s/(.*$re.*)/$match$1$normal/i;
        } else {
          $line =~ s/(.*$re.*)/$match$1$normal/;
        }
      } else {
        if ($ignore_case) {
          $line =~ s/($re)/$match$1$normal/gi;
        } else {
          $line =~ s/($re)/$match$1$normal/g;
        }
      }
      # And now, if we did fall through above (there was not a match, or
      # there was a match, and we are both inverted, and only printing
      # out matches (non matches, since inverted)), then we only print
      # out if we are printing non-matches (default case)
    }
#    if ($found_match_this_line) {
#      print "$prepend$line";
#      last;
#    }
  }
  if ($found_match_this_line ||
      (!$ignore_lines_no_match && !$found_match_this_line)) {
    print "$prepend$line";
  }
} continue {
  if (eof) {  # reset line numbering, and find out what file we are now
              # dealing with -- see man perlfunc, eof
    close ARGV;
    $file=$ARGV[0];
  }
}

if ($invert_match) {
  print "$match";
}

exit $exit;

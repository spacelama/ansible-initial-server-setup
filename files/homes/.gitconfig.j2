# https://jvns.ca/blog/2024/02/16/popular-git-config-options/
[user]
	name = Tim Connors

[url "git@github.com:"]
#	# replace accidentally https cloned github repos with
#	# git@github
#	insteadOf = "https://github.com/"
        pushInsteadOf = git://github.com/
        pushInsteadOf = https://github.com/

# set up per repo exceptions via includeIf instead
#[url "git@gitlab.....au:"]
#	email = ...
[includeIf "gitdir:~/**/code/work/"]
	path = "~/code/work/.gitconfig"

[color]
	status = auto
	branch = auto
	interactive = auto
	diff = auto
	ui = true

[blame]
	coloring = highlightRecent

[color "blame"]
    highlightRecent = 237, 20 month ago, 238, 19 month ago, 239, 18 month ago, 240, 17 month ago, 241, 16 month ago, 242, 15 month ago, 243, 14 month ago, 244, 13 month ago, 245, 12 month ago, 246, 11 month ago, 247, 10 month ago, 248, 9 month ago, 249, 8 month ago, 250, 7 month ago, 251, 6 month ago, 252, 5 month ago, 253, 4 month ago, 254, 3 month ago, 231, 2 month ago, 230, 1 month ago, 229, 3 weeks ago, 228, 2 weeks ago, 227, 1 week ago, 226

[pager]
	log = diff-highlight | less
	show = diff-highlight | less
	diff = diff-highlight | less

[log]
	decorate=short
	follow=true

[diff]
	# https://www.reddit.com/r/git/comments/1oi0tw/is_there_any_way_have_git_diff_show_that_a_file/
        renames = copies
	# FIXME:
	# some of the internet is saying 0...  Need to try it...
	#    diff.renameLimit
        # The number of files to consider when performing the copy/rename
        # detection; equivalent to the git diff option -l.
        renamelimit = 20
	algorithm = histogram
	colorMoved = dimmed-zebra
	# might want to avoid whitespace change (--ignore-space-change), since whitespace is syntactic in stupid languages like python
	colorMovedWS = allow-indentation-change
	mnemonicPrefix = true

[diff "gzip"]
        binary = true
	textconv = /bin/zcat

[delta]
	navigate = true    # use n and N to move between diff sections
	light = false      # set to true if you're in a terminal w/ a light background color (e.g. the default macOS terminal)

# from puppet/dotfiles/dot.gitconfig (jamie moore)
#[merge]
#        tool = vimdiff
[merge]
{% if deb_release != 'buster' %}
	conflictstyle = zdiff3
{% endif %}

[core]
	editor = e
	pager = less -F -X
	# FIXME: work out how to use pager without causing myself more problems
	# pager = delta

[branch]
# https://www.atlassian.com/git/tutorials/syncing/git-pull
	autosetuprebase = always
	sort = -committerdate

[push]
	default = simple
	autoSetupRemote = true
	followTags = true
# newer git may require:
[pull]
	rebase = true

# I don't think this will delete local branches that have been
# modified with extra commits when a remote branch has been removed?
# Should probably test...
[fetch]
	prune = true
	pruneTags = true
	all = true

[alias]
# http://idnotfound.wordpress.com/2009/05/09/word-by-word-diffs-in-git/
	wdiff = diff --color-words
#     colordiff = diff --color
	graph = log --graph --abbrev-commit --decorate --date=relative --pretty=format:'%C(bold yellow)%h%Creset -%C(yellow)%d%Creset %s %C(bold green)(%cr) %C(bold blue)<%an>%Creset'
	graphall = log --graph --abbrev-commit --decorate --date=relative --all --pretty=format:'%C(bold yellow)%h%Creset -%C(yellow)%d%Creset %s %C(bold green)(%cr) %C(bold blue)<%an>%Creset'
        ci = commit
        co = checkout
        br = branch
        st = status
        who = shortlog -s --
        email = config user.email
# following from https://github.com/k88hudson/git-flight-rules#i-want-to-add-aliases-for-some-git-commands
        a = add
        amend = commit --amend
        c = commit
        ca = commit --amend
        # ci = commit -a
        # co = checkout
        d = diff
        dc = diff --changed
        ds = diff --staged
        f = fetch
        loll = log --graph --decorate --pretty=oneline --abbrev-commit
        m = merge
        one = log --pretty=oneline
        outstanding = rebase -i @{u}
        s = status
        unpushed = log @{u}
        wc = whatchanged
        wip = rebase -i @{u}
	zap = fetch -p

	# for `git blame --follow` which isn't implemented, so git blame just returns the commit that renamed a file.  This doesn't really work that well though:
	# https://stackoverflow.com/questions/29468273/why-git-blame-does-not-follow-renames
	follow = "!bash -c '                                                 \
    if [[ $1 == \"/\"* ]]; then                                      \
        FILE=$1;                                                     \
    else                                                             \
        FILE=${GIT_PREFIX}$1;                                        \
    fi;                                                              \
    echo \"git log --topo-order -u -L $2,${3:-$2}:\\\"$FILE\\\" $4 \";   \
    git log -w -b -p --ignore-blank-lines --topo-order -u -L $2,${3:-$2}:\"$FILE\" $4;\
' --"

# https://blog.gitbutler.com/how-git-core-devs-configure-git/
[rebase]
	autosquash = true

[commit]
	verbose = true

[grep]
	patternType = perl

# meh, this isn't so fun on things like untracked files in `git status`
#[column]
#	ui = auto

[tag]
	sort = version:refname


[init]
	defaultBranch = main
[safe]
	directory = /mnt/c/Users/tconnors/dot-files
        directory = /mnt/c/Documents and Settings/tconnors/OneDrive - LA TROBE UNIVERSITY/Documents/dot-files-copy-from-ltu

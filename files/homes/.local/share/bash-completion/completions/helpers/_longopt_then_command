# -*- Mode: shell-script -*-

# A meta-command completion function for commands like sudo(8)
# (although it already has its own more complete meta completer),
# which need to first complete on a command, then complete according
# to that command's own completion definition - currently not quite
# foolproof, but much more useful than just binding it to _command,
# given you're most likely trying to complete on some obscure option
# rather than 'emacs'

# Everything in our own directory that overrides the system
# definition, has to disable every definition that has been
# pre-defined, otherwise ours will not be triggered to be
# autoloaded.  In debian bookworm, that's env, xargs, ...
# We disable these the moment the system definitions are defined in
# setup-environment.sh

# much of this structure taken from _sudo(), which has a similar aim
# to us:
_longopt_then_command()
{
    local cur prev words cword split
    _init_completion -s || return

    local CWORD_offset

    for ((CWORD_offset = 1, i = 1; i <= cword; CWORD_offset++, i++)); do
        local w="${words[i]}"

        # skip over any env a=b style assignments
        if [[ "$w" =~ ^[A-Za-z_][A-Za-z0-9_]*=.* ]]; then
            ((CWORD_offset+=2))   # var=word gets split up as var = word in CWORD (as opposed to
                                  # cword, which rejoins them), so need to offset CWORD by an
                                  # extra 2
            continue
        fi

        # we've reached a command that our meta function will be running, so invoke completion on that command
        if [[ ${words[i]} != -* ]]; then
            _command_offset $CWORD_offset
            return
        fi
    done

    $split && return

    # we haven't reached a command that our metafunction will be
    # running yet, so work out what our metafunctions's optional args
    # are
    if [[ $cur == -* ]]; then
        local opts=$(_parse_help "$1")
        COMPREPLY=($(compgen -W '${opts:-$(_parse_usage "$1")}' -- "$cur"))
        [[ ${COMPREPLY-} == *= ]] && compopt -o nospace

        return
    fi
}

# tested with so far:
# x xargs xn env nice chroot exec ltrace time command
complete -F _longopt_then_command "$cmd"


# get default system list with `complete -p | grep _command`

#complete -o bashdefault -o default -F _longopt_then_command x xargs xn env nice chroot exec ltrace time command
# env is already meant to be defined, although it doesn't work very well in bash-completion 2.11-6

# time doesn't have any --longopts or --help (hmmm, /usr/bin/time does - let's see what happens...)

# strace already has its own dynamically loaded completion

#complete -F _root_command sillysu  # already defined in sillysu.sh

# FIXME: be nice to override these _root_commands to do similar:

#complete -F _root_longopt_then_command fakeroot gksu gksudo kdesudo really sillysu

# su and sudo already defined more completely

# FIXME: and these commands that need other arguments first:

# faketime
